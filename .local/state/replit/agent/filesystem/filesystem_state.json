{"file_contents":{"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, decimal, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Validation pour les numéros de téléphone gabonais\n// Format: +241 suivi de 8 chiffres (avec ou sans espaces/tirets)\nexport const gabonPhoneSchema = z.string()\n  .min(1, \"Le numéro de téléphone est obligatoire\")\n  .refine((val) => {\n    // Enlever les espaces et tirets pour vérifier le format\n    const cleaned = val.replace(/[\\s\\-]/g, '');\n    // Doit commencer par +241 et avoir exactement 8 chiffres après\n    const regex = /^\\+241\\d{8}$/;\n    return regex.test(cleaned);\n  }, {\n    message: \"Le numéro doit être un numéro gabonais valide (format: +241 XX XX XX XX, 8 chiffres après +241)\"\n  });\n\nexport const parentRequestStatuses = [\"en_attente\", \"traite\", \"paye\"] as const;\nexport const nannyApplicationStatuses = [\"en_examen\", \"en_attente\", \"traite\", \"accepte\", \"refuse\"] as const;\n\nexport type ParentRequestStatus = typeof parentRequestStatuses[number];\nexport type NannyApplicationStatus = typeof nannyApplicationStatuses[number];\n\nexport const parentRequests = pgTable(\"parent_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nom: text(\"nom\").notNull(),\n  telephone: text(\"telephone\").notNull(),\n  adresse: text(\"adresse\").notNull(),\n  typeService: text(\"type_service\").notNull(),\n  horaireDebut: text(\"horaire_debut\"),\n  horaireFin: text(\"horaire_fin\"),\n  nombreEnfants: integer(\"nombre_enfants\").notNull(),\n  forfait: text(\"forfait\").notNull(),\n  commentaires: text(\"commentaires\"),\n  statut: text(\"statut\").default(\"en_attente\"),\n  dateCreation: timestamp(\"date_creation\").defaultNow(),\n});\n\nexport const nannyApplications = pgTable(\"nanny_applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nom: text(\"nom\").notNull(),\n  telephone: text(\"telephone\").notNull(),\n  adresse: text(\"adresse\").notNull(),\n  typePoste: text(\"type_poste\").notNull(),\n  experience: text(\"experience\").notNull(),\n  disponibilites: text(\"disponibilites\"),\n  documents: text(\"documents\"), // JSON array of document info\n  statut: text(\"statut\").default(\"en_examen\"),\n  dateCreation: timestamp(\"date_creation\").defaultNow(),\n});\n\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nom: text(\"nom\").notNull(),\n  telephone: text(\"telephone\").notNull(),\n  message: text(\"message\").notNull(),\n  dateCreation: timestamp(\"date_creation\").defaultNow(),\n});\n\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  demandeId: varchar(\"demande_id\"),\n  montant: decimal(\"montant\", { precision: 10, scale: 2 }),\n  methode: text(\"methode\"),\n  transactionId: text(\"transaction_id\"),\n  statut: text(\"statut\").default(\"en_attente\"),\n  dateCreation: timestamp(\"date_creation\").defaultNow(),\n  dateConfirmation: timestamp(\"date_confirmation\"),\n});\n\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  nom: text(\"nom\").notNull(),\n  email: text(\"email\").notNull(),\n  role: text(\"role\").default(\"admin\"),\n  dateCreation: timestamp(\"date_creation\").defaultNow(),\n});\n\nexport const notificationTypes = [\"nouvelle_demande\", \"nouvelle_candidature\", \"nouveau_message\", \"nouveau_match\"] as const;\nexport type NotificationType = typeof notificationTypes[number];\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(),\n  titre: text(\"titre\").notNull(),\n  message: text(\"message\").notNull(),\n  lue: boolean(\"lue\").default(false),\n  relatedId: varchar(\"related_id\"),\n  dateCreation: timestamp(\"date_creation\").defaultNow(),\n});\n\nexport const insertParentRequestSchema = createInsertSchema(parentRequests).omit({\n  id: true,\n  dateCreation: true,\n  statut: true,\n}).extend({\n  nom: z.string().min(1, \"Le nom est obligatoire\"),\n  telephone: gabonPhoneSchema,\n  adresse: z.string().min(1, \"L'adresse est obligatoire\"),\n  typeService: z.string().min(1, \"Le type de service est obligatoire\"),\n  horaireDebut: z.string().min(1, \"L'horaire de début est obligatoire\"),\n  horaireFin: z.string().min(1, \"L'horaire de fin est obligatoire\"),\n  nombreEnfants: z.number().min(1, \"Le nombre d'enfants doit être au moins 1\"),\n  forfait: z.string().min(1, \"Le forfait est obligatoire\"),\n  commentaires: z.string().optional(),\n});\n\nexport const insertNannyApplicationSchema = createInsertSchema(nannyApplications).omit({\n  id: true,\n  dateCreation: true,\n  statut: true,\n}).extend({\n  nom: z.string().min(1, \"Le nom est obligatoire\"),\n  telephone: gabonPhoneSchema,\n  adresse: z.string().min(1, \"L'adresse est obligatoire\"),\n  typePoste: z.string().min(1, \"Le type de poste est obligatoire\"),\n  experience: z.string().min(1, \"L'expérience est obligatoire\"),\n  disponibilites: z.string().min(1, \"Les disponibilités sont obligatoires\"),\n  documents: z.string().optional(),\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  dateCreation: true,\n}).extend({\n  nom: z.string().min(1, \"Le nom est obligatoire\"),\n  telephone: gabonPhoneSchema,\n  message: z.string().min(1, \"Le message est obligatoire\"),\n});\n\nexport type InsertParentRequest = z.infer<typeof insertParentRequestSchema>;\nexport type ParentRequest = typeof parentRequests.$inferSelect;\n\nexport type InsertNannyApplication = z.infer<typeof insertNannyApplicationSchema>;\nexport type NannyApplication = typeof nannyApplications.$inferSelect;\n\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\n\nexport type Payment = typeof payments.$inferSelect;\n\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  dateCreation: true,\n});\n\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\nexport type AdminUser = typeof adminUsers.$inferSelect;\n\nexport const updateAdminProfileSchema = z.object({\n  username: z.string().min(1, \"Le nom d'utilisateur est obligatoire\"),\n  nom: z.string().min(1, \"Le nom complet est obligatoire\"),\n  email: z.string().email(\"Email invalide\"),\n});\n\nexport type UpdateAdminProfile = z.infer<typeof updateAdminProfileSchema>;\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  dateCreation: true,\n  lue: true,\n});\n\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\n\nexport const updateParentRequestStatusSchema = z.object({\n  status: z.enum(parentRequestStatuses),\n});\n\nexport const updateNannyApplicationStatusSchema = z.object({\n  status: z.enum(nannyApplicationStatuses),\n});\n\n// Table des prestations de services (éditables par admin)\nexport const prestations = pgTable(\"prestations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nom: text(\"nom\").notNull(),\n  description: text(\"description\").notNull(),\n  horaireDebut: text(\"horaire_debut\"),\n  horaireFin: text(\"horaire_fin\"),\n  prix: integer(\"prix\").notNull(),\n  unite: text(\"unite\").notNull().default(\"FCFA\"),\n  actif: boolean(\"actif\").default(true),\n  dateCreation: timestamp(\"date_creation\").defaultNow(),\n});\n\n// Table des paramètres du site (infos de contact éditables)\nexport const parametresSite = pgTable(\"parametres_site\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  cle: text(\"cle\").notNull().unique(), // 'email', 'telephone', 'adresse', etc.\n  valeur: text(\"valeur\").notNull(),\n  dateModification: timestamp(\"date_modification\").defaultNow(),\n});\n\n// Table des employés (créés depuis candidatures acceptées)\nexport const employees = pgTable(\"employees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  candidatureId: varchar(\"candidature_id\").notNull(), // Lien vers nanny_applications\n  nom: text(\"nom\").notNull(),\n  telephone: text(\"telephone\").notNull(),\n  adresse: text(\"adresse\").notNull(),\n  typePoste: text(\"type_poste\").notNull(),\n  experience: text(\"experience\").notNull(),\n  disponibilites: text(\"disponibilites\"),\n  documents: text(\"documents\"), // JSON array of document info\n  actif: boolean(\"actif\").default(true),\n  dateEmbauche: timestamp(\"date_embauche\").defaultNow(),\n});\n\n// Table des paiements aux employés\nexport const paiementsEmployes = pgTable(\"paiements_employes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeId: varchar(\"employe_id\").notNull(),\n  montant: integer(\"montant\").notNull(),\n  motif: text(\"motif\").notNull(), // Ex: \"Garde du 01/10 au 05/10\"\n  datePaiement: timestamp(\"date_paiement\").defaultNow(),\n  notes: text(\"notes\"),\n});\n\n// Schemas Zod pour les nouvelles tables\nexport const insertPrestationSchema = createInsertSchema(prestations).omit({\n  id: true,\n  dateCreation: true,\n  actif: true,\n}).extend({\n  nom: z.string().min(1, \"Le nom est obligatoire\"),\n  description: z.string().min(1, \"La description est obligatoire\"),\n  prix: z.number().min(0, \"Le prix doit être positif\"),\n  unite: z.string().default(\"FCFA\"),\n  horaireDebut: z.string().optional(),\n  horaireFin: z.string().optional(),\n});\n\nexport const insertParametreSiteSchema = createInsertSchema(parametresSite).omit({\n  id: true,\n  dateModification: true,\n}).extend({\n  cle: z.string().min(1, \"La clé est obligatoire\"),\n  valeur: z.string().min(1, \"La valeur est obligatoire\"),\n});\n\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  dateEmbauche: true,\n  actif: true,\n}).extend({\n  candidatureId: z.string().min(1, \"L'ID de candidature est obligatoire\"),\n  nom: z.string().min(1, \"Le nom est obligatoire\"),\n  telephone: z.string().min(1, \"Le téléphone est obligatoire\"),\n  adresse: z.string().min(1, \"L'adresse est obligatoire\"),\n  typePoste: z.string().min(1, \"Le type de poste est obligatoire\"),\n  experience: z.string().min(1, \"L'expérience est obligatoire\"),\n  disponibilites: z.string().nullish(),\n  documents: z.string().nullish(),\n});\n\nexport const insertPaiementEmployeSchema = createInsertSchema(paiementsEmployes).omit({\n  id: true,\n  datePaiement: true,\n}).extend({\n  employeId: z.string().min(1, \"L'ID de l'employé est obligatoire\"),\n  montant: z.number().min(0, \"Le montant doit être positif\"),\n  motif: z.string().min(1, \"Le motif est obligatoire\"),\n  notes: z.string().optional(),\n});\n\n// Types TypeScript\nexport type InsertPrestation = z.infer<typeof insertPrestationSchema>;\nexport type Prestation = typeof prestations.$inferSelect;\n\nexport type InsertParametreSite = z.infer<typeof insertParametreSiteSchema>;\nexport type ParametreSite = typeof parametresSite.$inferSelect;\n\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type Employee = typeof employees.$inferSelect;\n\nexport type InsertPaiementEmploye = z.infer<typeof insertPaiementEmployeSchema>;\nexport type PaiementEmploye = typeof paiementsEmployes.$inferSelect;\n\n// Table des configurations de paiements mobiles\nexport const paymentProviders = [\"airtel_money\", \"moov_money\", \"cinetpay\"] as const;\nexport type PaymentProvider = typeof paymentProviders[number];\n\nexport const paymentConfigs = pgTable(\"payment_configs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  provider: text(\"provider\").notNull().unique(), // airtel_money, moov_money, cinetpay\n  actif: boolean(\"actif\").default(false),\n  apiKey: text(\"api_key\"),\n  apiSecret: text(\"api_secret\"),\n  configJson: text(\"config_json\"), // JSON pour configs additionnelles (URLs, IDs, etc.)\n  dateModification: timestamp(\"date_modification\").defaultNow(),\n});\n\nexport const insertPaymentConfigSchema = createInsertSchema(paymentConfigs).omit({\n  id: true,\n  dateModification: true,\n}).extend({\n  provider: z.enum(paymentProviders),\n  actif: z.boolean().default(false),\n  apiKey: z.string().optional(),\n  apiSecret: z.string().optional(),\n  configJson: z.string().optional(),\n});\n\nexport const updatePaymentConfigSchema = z.object({\n  actif: z.boolean(),\n  apiKey: z.string().optional(),\n  apiSecret: z.string().optional(),\n  configJson: z.string().optional(),\n});\n\nexport type InsertPaymentConfig = z.infer<typeof insertPaymentConfigSchema>;\nexport type UpdatePaymentConfig = z.infer<typeof updatePaymentConfigSchema>;\nexport type PaymentConfig = typeof paymentConfigs.$inferSelect;\n","size_bytes":12623},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/storage.ts":{"content":"import { type ParentRequest, type InsertParentRequest, type NannyApplication, type InsertNannyApplication, type ContactMessage, type InsertContactMessage, type Notification, type InsertNotification, type Prestation, type InsertPrestation, type ParametreSite, type InsertParametreSite, type Employee, type InsertEmployee, type PaiementEmploye, type InsertPaiementEmploye, type PaymentConfig, type InsertPaymentConfig, type UpdatePaymentConfig, parentRequests, nannyApplications, contactMessages, notifications, adminUsers, prestations, parametresSite, employees, paiementsEmployes, paymentConfigs } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { eq, desc } from \"drizzle-orm\";\n\n// Initialize database connection\nconst initDb = () => {\n  const databaseUrl = process.env.DATABASE_URL;\n  if (!databaseUrl) {\n    throw new Error(\"DATABASE_URL environment variable is not defined\");\n  }\n  const sql = neon(databaseUrl);\n  return drizzle(sql);\n};\n\nconst db = initDb();\n\nexport interface IStorage {\n  // Parent requests\n  createParentRequest(request: InsertParentRequest): Promise<ParentRequest>;\n  getParentRequests(): Promise<ParentRequest[]>;\n  updateParentRequestStatus(id: string, status: string): Promise<ParentRequest>;\n  \n  // Nanny applications\n  createNannyApplication(application: InsertNannyApplication): Promise<NannyApplication>;\n  getNannyApplications(): Promise<NannyApplication[]>;\n  getNannyApplicationById(id: string): Promise<NannyApplication | undefined>;\n  updateNannyApplicationStatus(id: string, status: string): Promise<NannyApplication>;\n  deleteNannyApplication(id: string): Promise<void>;\n  \n  // Contact messages\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getContactMessages(): Promise<ContactMessage[]>;\n  \n  // Notifications\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getNotifications(): Promise<Notification[]>;\n  getUnreadNotifications(): Promise<Notification[]>;\n  markNotificationAsRead(id: string): Promise<Notification>;\n  markAllNotificationsAsRead(): Promise<void>;\n  \n  // Admin\n  updateAdminPassword(id: string, passwordHash: string): Promise<void>;\n  updateAdminProfile(id: string, profile: import(\"@shared/schema\").UpdateAdminProfile): Promise<import(\"@shared/schema\").AdminUser>;\n  getAdminById(id: string): Promise<import(\"@shared/schema\").AdminUser | undefined>;\n  \n  // Prestations\n  createPrestation(prestation: InsertPrestation): Promise<Prestation>;\n  getPrestations(): Promise<Prestation[]>;\n  getPrestationById(id: string): Promise<Prestation | undefined>;\n  updatePrestation(id: string, prestation: Partial<InsertPrestation>): Promise<Prestation>;\n  deletePrestation(id: string): Promise<void>;\n  \n  // Paramètres site\n  createParametreSite(parametre: InsertParametreSite): Promise<ParametreSite>;\n  getParametresSite(): Promise<ParametreSite[]>;\n  getParametreSiteByCle(cle: string): Promise<ParametreSite | undefined>;\n  updateParametreSite(cle: string, valeur: string): Promise<ParametreSite>;\n  deleteParametreSite(cle: string): Promise<void>;\n  \n  // Employés\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  getEmployees(): Promise<Employee[]>;\n  getEmployeeById(id: string): Promise<Employee | undefined>;\n  updateEmployee(id: string, employee: Partial<InsertEmployee>): Promise<Employee>;\n  deleteEmployee(id: string): Promise<void>;\n  \n  // Paiements employés\n  createPaiementEmploye(paiement: InsertPaiementEmploye): Promise<PaiementEmploye>;\n  getPaiementsEmploye(employeId: string): Promise<PaiementEmploye[]>;\n  getAllPaiementsEmployes(): Promise<PaiementEmploye[]>;\n  \n  // Payment configurations\n  getPaymentConfigs(): Promise<PaymentConfig[]>;\n  getPaymentConfigByProvider(provider: string): Promise<PaymentConfig | undefined>;\n  upsertPaymentConfig(provider: string, config: UpdatePaymentConfig): Promise<PaymentConfig>;\n}\n\nexport class MemStorage implements IStorage {\n  private parentRequests: Map<string, ParentRequest>;\n  private nannyApplications: Map<string, NannyApplication>;\n  private contactMessages: Map<string, ContactMessage>;\n  private notifications: Map<string, Notification>;\n  private prestations: Map<string, Prestation>;\n  private parametresSite: Map<string, ParametreSite>;\n  private employees: Map<string, Employee>;\n  private paiementsEmployes: Map<string, PaiementEmploye>;\n\n  constructor() {\n    this.parentRequests = new Map();\n    this.nannyApplications = new Map();\n    this.contactMessages = new Map();\n    this.notifications = new Map();\n    this.prestations = new Map();\n    this.parametresSite = new Map();\n    this.employees = new Map();\n    this.paiementsEmployes = new Map();\n  }\n\n  async createParentRequest(insertRequest: InsertParentRequest): Promise<ParentRequest> {\n    const id = randomUUID();\n    const request: ParentRequest = {\n      ...insertRequest,\n      id,\n      horaireDebut: insertRequest.horaireDebut ?? null,\n      horaireFin: insertRequest.horaireFin ?? null,\n      commentaires: insertRequest.commentaires ?? null,\n      statut: \"en_attente\",\n      dateCreation: new Date(),\n    };\n    this.parentRequests.set(id, request);\n    return request;\n  }\n\n  async getParentRequests(): Promise<ParentRequest[]> {\n    return Array.from(this.parentRequests.values());\n  }\n\n  async updateParentRequestStatus(id: string, status: string): Promise<ParentRequest> {\n    const request = this.parentRequests.get(id);\n    if (!request) {\n      throw new Error(`Parent request with id ${id} not found`);\n    }\n    const updatedRequest = { ...request, statut: status };\n    this.parentRequests.set(id, updatedRequest);\n    return updatedRequest;\n  }\n\n  async createNannyApplication(insertApplication: InsertNannyApplication): Promise<NannyApplication> {\n    const id = randomUUID();\n    const application: NannyApplication = {\n      ...insertApplication,\n      id,\n      disponibilites: insertApplication.disponibilites ?? null,\n      documents: insertApplication.documents ?? null,\n      statut: \"en_examen\",\n      dateCreation: new Date(),\n    };\n    this.nannyApplications.set(id, application);\n    return application;\n  }\n\n  async getNannyApplications(): Promise<NannyApplication[]> {\n    return Array.from(this.nannyApplications.values());\n  }\n\n  async updateNannyApplicationStatus(id: string, status: string): Promise<NannyApplication> {\n    const application = this.nannyApplications.get(id);\n    if (!application) {\n      throw new Error(`Nanny application with id ${id} not found`);\n    }\n    const updatedApplication = { ...application, statut: status };\n    this.nannyApplications.set(id, updatedApplication);\n    return updatedApplication;\n  }\n\n  async deleteNannyApplication(id: string): Promise<void> {\n    const application = this.nannyApplications.get(id);\n    if (!application) {\n      throw new Error(`Nanny application with id ${id} not found`);\n    }\n    this.nannyApplications.delete(id);\n  }\n\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const id = randomUUID();\n    const message: ContactMessage = {\n      ...insertMessage,\n      id,\n      dateCreation: new Date(),\n    };\n    this.contactMessages.set(id, message);\n    return message;\n  }\n\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return Array.from(this.contactMessages.values());\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const id = randomUUID();\n    const notification: Notification = {\n      ...insertNotification,\n      id,\n      relatedId: insertNotification.relatedId ?? null,\n      lue: false,\n      dateCreation: new Date(),\n    };\n    this.notifications.set(id, notification);\n    return notification;\n  }\n\n  async getNotifications(): Promise<Notification[]> {\n    return Array.from(this.notifications.values()).sort((a, b) => \n      (b.dateCreation?.getTime() || 0) - (a.dateCreation?.getTime() || 0)\n    );\n  }\n\n  async getUnreadNotifications(): Promise<Notification[]> {\n    return Array.from(this.notifications.values())\n      .filter(n => !n.lue)\n      .sort((a, b) => \n        (b.dateCreation?.getTime() || 0) - (a.dateCreation?.getTime() || 0)\n      );\n  }\n\n  async markNotificationAsRead(id: string): Promise<Notification> {\n    const notification = this.notifications.get(id);\n    if (!notification) {\n      throw new Error(`Notification with id ${id} not found`);\n    }\n    const updatedNotification = { ...notification, lue: true };\n    this.notifications.set(id, updatedNotification);\n    return updatedNotification;\n  }\n\n  async markAllNotificationsAsRead(): Promise<void> {\n    const entries = Array.from(this.notifications.entries());\n    for (const [id, notification] of entries) {\n      this.notifications.set(id, { ...notification, lue: true });\n    }\n  }\n\n  async updateAdminPassword(id: string, passwordHash: string): Promise<void> {\n    // In-memory storage doesn't support admin users\n    throw new Error(\"Admin password update not supported in memory storage\");\n  }\n\n  async updateAdminProfile(id: string, profile: import(\"@shared/schema\").UpdateAdminProfile): Promise<import(\"@shared/schema\").AdminUser> {\n    // In-memory storage doesn't support admin users\n    throw new Error(\"Admin profile update not supported in memory storage\");\n  }\n\n  async getAdminById(id: string): Promise<import(\"@shared/schema\").AdminUser | undefined> {\n    // In-memory storage doesn't support admin users\n    throw new Error(\"Get admin by ID not supported in memory storage\");\n  }\n\n  async getNannyApplicationById(id: string): Promise<NannyApplication | undefined> {\n    return this.nannyApplications.get(id);\n  }\n\n  async createPrestation(insertPrestation: InsertPrestation): Promise<Prestation> {\n    const id = randomUUID();\n    const prestation: Prestation = {\n      ...insertPrestation,\n      id,\n      horaireDebut: insertPrestation.horaireDebut ?? null,\n      horaireFin: insertPrestation.horaireFin ?? null,\n      actif: true,\n      dateCreation: new Date(),\n    };\n    this.prestations.set(id, prestation);\n    return prestation;\n  }\n\n  async getPrestations(): Promise<Prestation[]> {\n    return Array.from(this.prestations.values());\n  }\n\n  async getPrestationById(id: string): Promise<Prestation | undefined> {\n    return this.prestations.get(id);\n  }\n\n  async updatePrestation(id: string, updateData: Partial<InsertPrestation>): Promise<Prestation> {\n    const prestation = this.prestations.get(id);\n    if (!prestation) {\n      throw new Error(`Prestation with id ${id} not found`);\n    }\n    const updatedPrestation = { ...prestation, ...updateData };\n    this.prestations.set(id, updatedPrestation);\n    return updatedPrestation;\n  }\n\n  async deletePrestation(id: string): Promise<void> {\n    const prestation = this.prestations.get(id);\n    if (!prestation) {\n      throw new Error(`Prestation with id ${id} not found`);\n    }\n    this.prestations.delete(id);\n  }\n\n  async createParametreSite(insertParametre: InsertParametreSite): Promise<ParametreSite> {\n    const id = randomUUID();\n    const parametre: ParametreSite = {\n      ...insertParametre,\n      id,\n      dateModification: new Date(),\n    };\n    this.parametresSite.set(id, parametre);\n    return parametre;\n  }\n\n  async getParametresSite(): Promise<ParametreSite[]> {\n    return Array.from(this.parametresSite.values());\n  }\n\n  async getParametreSiteByCle(cle: string): Promise<ParametreSite | undefined> {\n    return Array.from(this.parametresSite.values()).find(p => p.cle === cle);\n  }\n\n  async updateParametreSite(cle: string, valeur: string): Promise<ParametreSite> {\n    const parametre = Array.from(this.parametresSite.values()).find(p => p.cle === cle);\n    if (!parametre) {\n      throw new Error(`Parametre with key ${cle} not found`);\n    }\n    const updatedParametre = { ...parametre, valeur, dateModification: new Date() };\n    this.parametresSite.set(parametre.id, updatedParametre);\n    return updatedParametre;\n  }\n\n  async deleteParametreSite(cle: string): Promise<void> {\n    const parametre = Array.from(this.parametresSite.values()).find(p => p.cle === cle);\n    if (!parametre) {\n      throw new Error(`Parametre with key ${cle} not found`);\n    }\n    this.parametresSite.delete(parametre.id);\n  }\n\n  async createEmployee(insertEmployee: InsertEmployee): Promise<Employee> {\n    const id = randomUUID();\n    const employee: Employee = {\n      ...insertEmployee,\n      id,\n      disponibilites: insertEmployee.disponibilites ?? null,\n      documents: insertEmployee.documents ?? null,\n      actif: true,\n      dateEmbauche: new Date(),\n    };\n    this.employees.set(id, employee);\n    return employee;\n  }\n\n  async getEmployees(): Promise<Employee[]> {\n    return Array.from(this.employees.values());\n  }\n\n  async getEmployeeById(id: string): Promise<Employee | undefined> {\n    return this.employees.get(id);\n  }\n\n  async updateEmployee(id: string, updateData: Partial<InsertEmployee>): Promise<Employee> {\n    const employee = this.employees.get(id);\n    if (!employee) {\n      throw new Error(`Employee with id ${id} not found`);\n    }\n    const updatedEmployee = { ...employee, ...updateData };\n    this.employees.set(id, updatedEmployee);\n    return updatedEmployee;\n  }\n\n  async deleteEmployee(id: string): Promise<void> {\n    const employee = this.employees.get(id);\n    if (!employee) {\n      throw new Error(`Employee with id ${id} not found`);\n    }\n    this.employees.delete(id);\n  }\n\n  async createPaiementEmploye(insertPaiement: InsertPaiementEmploye): Promise<PaiementEmploye> {\n    const id = randomUUID();\n    const paiement: PaiementEmploye = {\n      ...insertPaiement,\n      id,\n      notes: insertPaiement.notes ?? null,\n      datePaiement: new Date(),\n    };\n    this.paiementsEmployes.set(id, paiement);\n    return paiement;\n  }\n\n  async getPaiementsEmploye(employeId: string): Promise<PaiementEmploye[]> {\n    return Array.from(this.paiementsEmployes.values()).filter(p => p.employeId === employeId);\n  }\n\n  async getAllPaiementsEmployes(): Promise<PaiementEmploye[]> {\n    return Array.from(this.paiementsEmployes.values());\n  }\n\n  async getPaymentConfigs(): Promise<PaymentConfig[]> {\n    throw new Error(\"Payment configs not supported in memory storage\");\n  }\n\n  async getPaymentConfigByProvider(provider: string): Promise<PaymentConfig | undefined> {\n    throw new Error(\"Payment configs not supported in memory storage\");\n  }\n\n  async upsertPaymentConfig(provider: string, config: UpdatePaymentConfig): Promise<PaymentConfig> {\n    throw new Error(\"Payment configs not supported in memory storage\");\n  }\n}\n\nexport class DbStorage implements IStorage {\n  async createParentRequest(insertRequest: InsertParentRequest): Promise<ParentRequest> {\n    const [request] = await db.insert(parentRequests).values(insertRequest).returning();\n    return request;\n  }\n\n  async getParentRequests(): Promise<ParentRequest[]> {\n    return await db.select().from(parentRequests);\n  }\n\n  async updateParentRequestStatus(id: string, status: string): Promise<ParentRequest> {\n    const [updatedRequest] = await db\n      .update(parentRequests)\n      .set({ statut: status })\n      .where(eq(parentRequests.id, id))\n      .returning();\n    \n    if (!updatedRequest) {\n      throw new Error(`Parent request with id ${id} not found`);\n    }\n    \n    return updatedRequest;\n  }\n\n  async createNannyApplication(insertApplication: InsertNannyApplication): Promise<NannyApplication> {\n    const [application] = await db.insert(nannyApplications).values(insertApplication).returning();\n    return application;\n  }\n\n  async getNannyApplications(): Promise<NannyApplication[]> {\n    return await db.select().from(nannyApplications);\n  }\n\n  async updateNannyApplicationStatus(id: string, status: string): Promise<NannyApplication> {\n    const [updatedApplication] = await db\n      .update(nannyApplications)\n      .set({ statut: status })\n      .where(eq(nannyApplications.id, id))\n      .returning();\n    \n    if (!updatedApplication) {\n      throw new Error(`Nanny application with id ${id} not found`);\n    }\n    \n    return updatedApplication;\n  }\n\n  async deleteNannyApplication(id: string): Promise<void> {\n    const result = await db.delete(nannyApplications).where(eq(nannyApplications.id, id)).returning();\n    if (result.length === 0) {\n      throw new Error(`Nanny application with id ${id} not found`);\n    }\n  }\n\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const [message] = await db.insert(contactMessages).values(insertMessage).returning();\n    return message;\n  }\n\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return await db.select().from(contactMessages);\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const [notification] = await db.insert(notifications).values(insertNotification).returning();\n    return notification;\n  }\n\n  async getNotifications(): Promise<Notification[]> {\n    return await db.select().from(notifications).orderBy(desc(notifications.dateCreation));\n  }\n\n  async getUnreadNotifications(): Promise<Notification[]> {\n    return await db.select().from(notifications)\n      .where(eq(notifications.lue, false))\n      .orderBy(desc(notifications.dateCreation));\n  }\n\n  async markNotificationAsRead(id: string): Promise<Notification> {\n    const [updatedNotification] = await db\n      .update(notifications)\n      .set({ lue: true })\n      .where(eq(notifications.id, id))\n      .returning();\n    \n    if (!updatedNotification) {\n      throw new Error(`Notification with id ${id} not found`);\n    }\n    \n    return updatedNotification;\n  }\n\n  async markAllNotificationsAsRead(): Promise<void> {\n    await db.update(notifications).set({ lue: true });\n  }\n\n  async updateAdminPassword(id: string, passwordHash: string): Promise<void> {\n    await db\n      .update(adminUsers)\n      .set({ passwordHash })\n      .where(eq(adminUsers.id, id));\n  }\n\n  async updateAdminProfile(id: string, profile: import(\"@shared/schema\").UpdateAdminProfile): Promise<import(\"@shared/schema\").AdminUser> {\n    const [updatedAdmin] = await db\n      .update(adminUsers)\n      .set(profile)\n      .where(eq(adminUsers.id, id))\n      .returning();\n    \n    if (!updatedAdmin) {\n      throw new Error(`Admin with id ${id} not found`);\n    }\n    \n    return updatedAdmin;\n  }\n\n  async getAdminById(id: string): Promise<import(\"@shared/schema\").AdminUser | undefined> {\n    const [admin] = await db\n      .select()\n      .from(adminUsers)\n      .where(eq(adminUsers.id, id))\n      .limit(1);\n    return admin;\n  }\n\n  async getNannyApplicationById(id: string): Promise<NannyApplication | undefined> {\n    const [application] = await db\n      .select()\n      .from(nannyApplications)\n      .where(eq(nannyApplications.id, id))\n      .limit(1);\n    return application;\n  }\n\n  async createPrestation(insertPrestation: InsertPrestation): Promise<Prestation> {\n    const [prestation] = await db.insert(prestations).values(insertPrestation).returning();\n    return prestation;\n  }\n\n  async getPrestations(): Promise<Prestation[]> {\n    return await db.select().from(prestations);\n  }\n\n  async getPrestationById(id: string): Promise<Prestation | undefined> {\n    const [prestation] = await db\n      .select()\n      .from(prestations)\n      .where(eq(prestations.id, id))\n      .limit(1);\n    return prestation;\n  }\n\n  async updatePrestation(id: string, updateData: Partial<InsertPrestation>): Promise<Prestation> {\n    const [updatedPrestation] = await db\n      .update(prestations)\n      .set(updateData)\n      .where(eq(prestations.id, id))\n      .returning();\n    \n    if (!updatedPrestation) {\n      throw new Error(`Prestation with id ${id} not found`);\n    }\n    \n    return updatedPrestation;\n  }\n\n  async deletePrestation(id: string): Promise<void> {\n    const result = await db.delete(prestations).where(eq(prestations.id, id)).returning();\n    if (result.length === 0) {\n      throw new Error(`Prestation with id ${id} not found`);\n    }\n  }\n\n  async createParametreSite(insertParametre: InsertParametreSite): Promise<ParametreSite> {\n    const [parametre] = await db.insert(parametresSite).values(insertParametre).returning();\n    return parametre;\n  }\n\n  async getParametresSite(): Promise<ParametreSite[]> {\n    return await db.select().from(parametresSite);\n  }\n\n  async getParametreSiteByCle(cle: string): Promise<ParametreSite | undefined> {\n    const [parametre] = await db\n      .select()\n      .from(parametresSite)\n      .where(eq(parametresSite.cle, cle))\n      .limit(1);\n    return parametre;\n  }\n\n  async updateParametreSite(cle: string, valeur: string): Promise<ParametreSite> {\n    const [updatedParametre] = await db\n      .update(parametresSite)\n      .set({ valeur, dateModification: new Date() })\n      .where(eq(parametresSite.cle, cle))\n      .returning();\n    \n    if (!updatedParametre) {\n      throw new Error(`Parametre with key ${cle} not found`);\n    }\n    \n    return updatedParametre;\n  }\n\n  async deleteParametreSite(cle: string): Promise<void> {\n    const result = await db.delete(parametresSite).where(eq(parametresSite.cle, cle)).returning();\n    if (result.length === 0) {\n      throw new Error(`Parametre with key ${cle} not found`);\n    }\n  }\n\n  async createEmployee(insertEmployee: InsertEmployee): Promise<Employee> {\n    const [employee] = await db.insert(employees).values(insertEmployee).returning();\n    return employee;\n  }\n\n  async getEmployees(): Promise<Employee[]> {\n    return await db.select().from(employees);\n  }\n\n  async getEmployeeById(id: string): Promise<Employee | undefined> {\n    const [employee] = await db\n      .select()\n      .from(employees)\n      .where(eq(employees.id, id))\n      .limit(1);\n    return employee;\n  }\n\n  async updateEmployee(id: string, updateData: Partial<InsertEmployee>): Promise<Employee> {\n    const [updatedEmployee] = await db\n      .update(employees)\n      .set(updateData)\n      .where(eq(employees.id, id))\n      .returning();\n    \n    if (!updatedEmployee) {\n      throw new Error(`Employee with id ${id} not found`);\n    }\n    \n    return updatedEmployee;\n  }\n\n  async deleteEmployee(id: string): Promise<void> {\n    const result = await db.delete(employees).where(eq(employees.id, id)).returning();\n    if (result.length === 0) {\n      throw new Error(`Employee with id ${id} not found`);\n    }\n  }\n\n  async createPaiementEmploye(insertPaiement: InsertPaiementEmploye): Promise<PaiementEmploye> {\n    const [paiement] = await db.insert(paiementsEmployes).values(insertPaiement).returning();\n    return paiement;\n  }\n\n  async getPaiementsEmploye(employeId: string): Promise<PaiementEmploye[]> {\n    return await db\n      .select()\n      .from(paiementsEmployes)\n      .where(eq(paiementsEmployes.employeId, employeId));\n  }\n\n  async getAllPaiementsEmployes(): Promise<PaiementEmploye[]> {\n    return await db.select().from(paiementsEmployes);\n  }\n\n  async getPaymentConfigs(): Promise<PaymentConfig[]> {\n    return await db.select().from(paymentConfigs);\n  }\n\n  async getPaymentConfigByProvider(provider: string): Promise<PaymentConfig | undefined> {\n    const [config] = await db\n      .select()\n      .from(paymentConfigs)\n      .where(eq(paymentConfigs.provider, provider))\n      .limit(1);\n    return config;\n  }\n\n  async upsertPaymentConfig(provider: string, config: UpdatePaymentConfig): Promise<PaymentConfig> {\n    const existing = await this.getPaymentConfigByProvider(provider);\n    \n    if (existing) {\n      const [updated] = await db\n        .update(paymentConfigs)\n        .set({ ...config, dateModification: new Date() })\n        .where(eq(paymentConfigs.provider, provider))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(paymentConfigs)\n        .values({ provider, ...config })\n        .returning();\n      return created;\n    }\n  }\n}\n\n// Use database storage in production, memory storage for testing\nexport const storage = process.env.NODE_ENV === 'test' ? new MemStorage() : new DbStorage();\n","size_bytes":24123},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/pages/nanny-form.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { ArrowLeft, IdCard, Briefcase, FileUp, Check, CheckCircle, Loader2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { insertNannyApplicationSchema } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { localStorage } from \"@/lib/storage\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport nannyFormImage from \"@assets/stock_images/professional_african_fd0ffe5f.jpg\";\n\ninterface UploadedFile {\n  filename: string;\n  storedPath: string;\n  size: number;\n  type: string;\n  data?: string; // base64 data\n}\n\nexport default function NannyForm() {\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(insertNannyApplicationSchema),\n    defaultValues: {\n      nom: \"\",\n      telephone: \"\",\n      adresse: \"\",\n      typePoste: \"\",\n      experience: \"\",\n      disponibilites: \"\",\n      documents: \"\",\n    },\n  });\n\n  const createApplicationMutation = useMutation({\n    mutationFn: async (data: any) => {\n      try {\n        const response = await apiRequest(\"POST\", \"/api/nanny-applications\", data);\n        return await response.json();\n      } catch (error) {\n        await localStorage.storeNannyApplication(data);\n        return { offline: true };\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/nanny-applications\"] });\n      setShowSuccess(true);\n      form.reset();\n      setUploadedFiles([]);\n      setTimeout(() => setShowSuccess(false), 5000);\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    const applicationData = {\n      ...data,\n      documents: JSON.stringify(uploadedFiles.map(f => ({\n        filename: f.filename,\n        storedPath: f.storedPath,\n        size: f.size,\n        type: f.type,\n        data: f.data // Include base64 data\n      }))),\n    };\n    createApplicationMutation.mutate(applicationData);\n  };\n\n  const handleFileUpload = () => {\n    // Open file picker\n    fileInputRef.current?.click();\n  };\n\n  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files || files.length === 0) return;\n\n    setIsUploading(true);\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      \n      // Check file size (5MB max)\n      if (file.size > 5 * 1024 * 1024) {\n        toast({\n          title: \"Fichier trop volumineux\",\n          description: `${file.name} dépasse la limite de 5MB`,\n          variant: \"destructive\"\n        });\n        continue;\n      }\n\n      // Upload file\n      const formData = new FormData();\n      formData.append('file', file);\n\n      try {\n        const response = await fetch('/api/upload', {\n          method: 'POST',\n          body: formData,\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          toast({\n            title: \"Erreur d'upload\",\n            description: error.message || \"Impossible d'uploader le fichier\",\n            variant: \"destructive\"\n          });\n          continue;\n        }\n\n        const uploadedFile = await response.json();\n        setUploadedFiles(prev => [...prev, uploadedFile]);\n        \n        toast({\n          title: \"Fichier uploadé\",\n          description: `${uploadedFile.filename} a été uploadé avec succès`,\n        });\n      } catch (error) {\n        console.error('Upload error:', error);\n        toast({\n          title: \"Erreur d'upload\",\n          description: \"Une erreur est survenue lors de l'upload\",\n          variant: \"destructive\"\n        });\n      }\n    }\n\n    setIsUploading(false);\n    // Reset input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setUploadedFiles(uploadedFiles.filter((_, i) => i !== index));\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n  };\n\n  if (showSuccess) {\n    return (\n      <div className=\"mobile-container min-h-screen bg-background\">\n        <div className=\"bg-accent p-4 sm:p-6\">\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-foreground\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n            </Link>\n            <div>\n              <h2 className=\"text-xl font-bold text-foreground font-heading\">Candidature envoyée</h2>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-4 sm:p-6 pb-32 flex items-center justify-center min-h-[60vh]\">\n          <Card className=\"w-full text-center\">\n            <CardContent className=\"pt-6\">\n              <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n              <h3 className=\"font-heading font-bold text-xl mb-2\">Candidature enregistrée !</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Nous vous contacterons après examen de votre dossier.\n              </p>\n              <Link href=\"/\">\n                <Button data-testid=\"button-return-home\" className=\"btn-primary\">\n                  Retourner à l'accueil\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-background\">\n      {/* Header with Image */}\n      <div className=\"relative overflow-hidden\">\n        <img \n          src={nannyFormImage} \n          alt=\"Nounou professionnelle\" \n          className=\"w-full h-48 object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-secondary/90 to-secondary/40 flex items-end p-4 sm:p-6\">\n          <div className=\"flex items-center gap-4 w-full\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n            </Link>\n            <div>\n              <h2 className=\"text-xl font-bold text-white font-heading\">Postuler comme nounou</h2>\n              <p className=\"text-sm text-white/90\">Rejoignez notre équipe</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Form Content */}\n      <div className=\"p-4 sm:p-6 pb-32 w-full\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Personal Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <IdCard className=\"text-primary w-5 h-5\" />\n                  Informations personnelles\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"nom\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nom complet *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Votre nom complet\" \n                          className=\"input-field\"\n                          data-testid=\"input-nom\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"telephone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Téléphone *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"+241 XX XX XX XX\" \n                          className=\"input-field\"\n                          data-testid=\"input-telephone\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"adresse\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Adresse / Quartier *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Votre quartier\" \n                          className=\"input-field\"\n                          data-testid=\"input-adresse\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Professional Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Briefcase className=\"text-accent-foreground w-5 h-5\" />\n                  Expérience professionnelle\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"typePoste\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Type de poste souhaité *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"input-field\" data-testid=\"select-type-poste\">\n                            <SelectValue placeholder=\"Sélectionnez\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"nounou\">Nounou</SelectItem>\n                          <SelectItem value=\"devoirs\">Aide aux devoirs</SelectItem>\n                          <SelectItem value=\"personne\">Aide à la personne</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"experience\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Expérience *</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Décrivez votre expérience dans la garde d'enfants...\" \n                          className=\"input-field\"\n                          rows={4}\n                          data-testid=\"textarea-experience\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"disponibilites\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Disponibilités *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"input-field\" data-testid=\"select-disponibilites\">\n                            <SelectValue placeholder=\"Sélectionnez vos disponibilités\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"lundi-vendredi\">Lundi - Vendredi</SelectItem>\n                          <SelectItem value=\"weekend\">Week-end</SelectItem>\n                          <SelectItem value=\"nuits\">Nuits</SelectItem>\n                          <SelectItem value=\"flexible\">Flexible (tous horaires)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Document Upload */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <FileUp className=\"text-primary w-5 h-5\" />\n                  Documents\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Hidden file input */}\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  className=\"hidden\"\n                  multiple\n                  accept=\".pdf,.jpg,.jpeg,.png\"\n                  onChange={handleFileSelect}\n                  data-testid=\"file-input\"\n                />\n                \n                <div \n                  className=\"border-2 border-dashed border-border rounded-lg p-8 text-center transition-all duration-300 cursor-pointer hover:border-primary hover:bg-secondary\"\n                  onClick={handleFileUpload}\n                  data-testid=\"file-upload-area\"\n                >\n                  {isUploading ? (\n                    <>\n                      <Loader2 className=\"w-12 h-12 text-primary mb-3 mx-auto animate-spin\" />\n                      <p className=\"font-medium mb-1\">Upload en cours...</p>\n                    </>\n                  ) : (\n                    <>\n                      <FileUp className=\"w-12 h-12 text-muted-foreground mb-3 mx-auto\" />\n                      <p className=\"font-medium mb-1\">Téléverser vos documents</p>\n                      <p className=\"text-sm text-muted-foreground mb-3\">CV, CNI, Photo (PDF, JPG, PNG - max 5MB)</p>\n                      <div className=\"service-badge\">\n                        <Check className=\"w-3 h-3 mr-1 inline\" />\n                        Ajouter des fichiers\n                      </div>\n                    </>\n                  )}\n                </div>\n\n                {/* Uploaded Files Preview */}\n                {uploadedFiles.length > 0 && (\n                  <div className=\"space-y-2\">\n                    {uploadedFiles.map((file, index) => (\n                      <div key={index} className=\"flex items-center gap-3 p-3 bg-muted/30 rounded-lg\">\n                        <FileUp className=\"w-8 h-8 text-primary\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\" data-testid={`file-name-${index}`}>{file.filename}</p>\n                          <p className=\"text-xs text-muted-foreground\">{formatFileSize(file.size)}</p>\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => removeFile(index)}\n                          className=\"text-destructive\"\n                          data-testid={`button-remove-file-${index}`}\n                        >\n                          <i className=\"fas fa-times\"></i>\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Submit Button */}\n            <Button \n              type=\"submit\" \n              className=\"btn-primary w-full\" \n              disabled={createApplicationMutation.isPending}\n              data-testid=\"button-submit\"\n            >\n              <Check className=\"w-4 h-4 mr-2\" />\n              {createApplicationMutation.isPending ? \"Envoi en cours...\" : \"Soumettre ma candidature\"}\n            </Button>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17114},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport ParentForm from \"@/pages/parent-form\";\nimport NannyForm from \"@/pages/nanny-form\";\nimport Services from \"@/pages/services\";\nimport Payment from \"@/pages/payment\";\nimport Contact from \"@/pages/contact\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDirectLogin from \"@/pages/admin-direct-login\";\nimport AdminDashboard from \"@/pages/admin\";\nimport AdminProfile from \"@/pages/admin-profile\";\nimport AdminPrestations from \"@/pages/admin-prestations\";\nimport AdminParametres from \"@/pages/admin-parametres\";\nimport AdminPaymentConfig from \"@/pages/admin-payment-config\";\nimport MatchingPage from \"@/pages/matching\";\nimport BottomNavigation from \"@/components/bottom-navigation\";\n\nfunction Router() {\n  return (\n    <>\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/parent-form\" component={ParentForm} />\n        <Route path=\"/nanny-form\" component={NannyForm} />\n        <Route path=\"/services\" component={Services} />\n        <Route path=\"/payment\" component={Payment} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route path=\"/admin/login\" component={AdminLogin} />\n        <Route path=\"/admin/direct-login\" component={AdminDirectLogin} />\n        <Route path=\"/admin/profile\" component={AdminProfile} />\n        <Route path=\"/admin/prestations\" component={AdminPrestations} />\n        <Route path=\"/admin/parametres\" component={AdminParametres} />\n        <Route path=\"/admin/payment-config\" component={AdminPaymentConfig} />\n        <Route path=\"/admin/matching\" component={MatchingPage} />\n        <Route path=\"/admin\" component={AdminDashboard} />\n        <Route component={NotFound} />\n      </Switch>\n      <BottomNavigation />\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2273},"client/src/lib/storage.ts":{"content":"// IndexedDB storage for offline functionality\nclass LocalStorage {\n  private dbName = 'GardeEnfantsDB';\n  private version = 1;\n  private db: IDBDatabase | null = null;\n\n  async init(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n      \n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        \n        // Parent requests store\n        if (!db.objectStoreNames.contains('parentRequests')) {\n          const store = db.createObjectStore('parentRequests', { keyPath: 'id', autoIncrement: true });\n          store.createIndex('dateCreation', 'dateCreation', { unique: false });\n        }\n        \n        // Nanny applications store\n        if (!db.objectStoreNames.contains('nannyApplications')) {\n          const store = db.createObjectStore('nannyApplications', { keyPath: 'id', autoIncrement: true });\n          store.createIndex('dateCreation', 'dateCreation', { unique: false });\n        }\n        \n        // Contact messages store\n        if (!db.objectStoreNames.contains('contactMessages')) {\n          const store = db.createObjectStore('contactMessages', { keyPath: 'id', autoIncrement: true });\n          store.createIndex('dateCreation', 'dateCreation', { unique: false });\n        }\n        \n        // Sync queue for offline submissions\n        if (!db.objectStoreNames.contains('syncQueue')) {\n          db.createObjectStore('syncQueue', { keyPath: 'id', autoIncrement: true });\n        }\n      };\n    });\n  }\n\n  async storeParentRequest(data: any): Promise<void> {\n    if (!this.db) await this.init();\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['parentRequests'], 'readwrite');\n      const store = transaction.objectStore('parentRequests');\n      \n      const requestData = {\n        ...data,\n        dateCreation: new Date(),\n        synced: false\n      };\n      \n      const request = store.add(requestData);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async storeNannyApplication(data: any): Promise<void> {\n    if (!this.db) await this.init();\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['nannyApplications'], 'readwrite');\n      const store = transaction.objectStore('nannyApplications');\n      \n      const applicationData = {\n        ...data,\n        dateCreation: new Date(),\n        synced: false\n      };\n      \n      const request = store.add(applicationData);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async storeContactMessage(data: any): Promise<void> {\n    if (!this.db) await this.init();\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['contactMessages'], 'readwrite');\n      const store = transaction.objectStore('contactMessages');\n      \n      const messageData = {\n        ...data,\n        dateCreation: new Date(),\n        synced: false\n      };\n      \n      const request = store.add(messageData);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n}\n\nexport const localStorage = new LocalStorage();\n","size_bytes":3490},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, Mail, Phone, MapPin, MessageSquare, Send, Clock, CheckCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { insertContactMessageSchema, type ParametreSite } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { localStorage } from \"@/lib/storage\";\nimport contactImage from \"@assets/stock_images/warm_african_mother__19616505.jpg\";\n\nexport default function Contact() {\n  const [showSuccess, setShowSuccess] = useState(false);\n\n  const { data: parametres = [], isLoading: parametresLoading } = useQuery<ParametreSite[]>({\n    queryKey: [\"/api/parametres-site\"],\n  });\n\n  const email = parametresLoading ? \"Chargement...\" : (parametres.find(p => p.cle === \"email\")?.valeur || \"contact@gardedesenfantsgabon.com\");\n  const telephone = parametresLoading ? \"Chargement...\" : (parametres.find(p => p.cle === \"telephone\")?.valeur || \"+241 XX XX XX XX\");\n  const adresse = parametresLoading ? \"Chargement...\" : (parametres.find(p => p.cle === \"adresse\")?.valeur || \"Libreville, Gabon\");\n\n  const form = useForm({\n    resolver: zodResolver(insertContactMessageSchema),\n    defaultValues: {\n      nom: \"\",\n      telephone: \"\",\n      message: \"\",\n    },\n  });\n\n  const createMessageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      try {\n        const response = await apiRequest(\"POST\", \"/api/contact-messages\", data);\n        return await response.json();\n      } catch (error) {\n        await localStorage.storeContactMessage(data);\n        return { offline: true };\n      }\n    },\n    onSuccess: () => {\n      setShowSuccess(true);\n      form.reset();\n      setTimeout(() => setShowSuccess(false), 5000);\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createMessageMutation.mutate(data);\n  };\n\n  if (showSuccess) {\n    return (\n      <div className=\"mobile-container min-h-screen bg-background\">\n        <div className=\"bg-primary p-6\">\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n            </Link>\n            <div>\n              <h2 className=\"text-xl font-bold text-white font-heading\">Message envoyé</h2>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-4 sm:p-6 pb-32 flex items-center justify-center min-h-[60vh]\">\n          <Card className=\"w-full text-center\">\n            <CardContent className=\"pt-6\">\n              <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n              <h3 className=\"font-heading font-bold text-xl mb-2\">Message envoyé !</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Nous vous répondrons dans les plus brefs délais.\n              </p>\n              <Link href=\"/\">\n                <Button data-testid=\"button-return-home\" className=\"btn-primary\">\n                  Retourner à l'accueil\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-background\">\n      {/* Header with Image */}\n      <div className=\"relative overflow-hidden\">\n        <img \n          src={contactImage} \n          alt=\"Contact - Famille heureuse\" \n          className=\"w-full h-48 object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-primary/90 to-primary/40 flex items-end p-6\">\n          <div className=\"flex items-center gap-4 w-full\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n            </Link>\n            <div>\n              <h2 className=\"text-xl font-bold text-white font-heading\">Nous contacter</h2>\n              <p className=\"text-sm text-white/90\">Nous sommes à votre écoute</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-4 sm:p-6 pb-32\">\n        {/* Contact Info Cards */}\n        <div className=\"grid gap-4 mb-6 w-full\">\n          {/* Email */}\n          <Card data-testid=\"contact-email\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"icon-circle bg-primary/20 shrink-0\">\n                  <Mail className=\"text-primary w-5 h-5\" />\n                </div>\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">Email</p>\n                  <p className=\"font-semibold text-sm sm:text-base break-words\">{email}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Phone */}\n          <Card data-testid=\"contact-phone\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"icon-circle bg-accent/30 shrink-0\">\n                  <Phone className=\"text-accent-foreground w-5 h-5\" />\n                </div>\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">Téléphone</p>\n                  <p className=\"font-semibold\">{telephone}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Address */}\n          <Card data-testid=\"contact-address\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"icon-circle bg-secondary shrink-0\">\n                  <MapPin className=\"text-secondary-foreground w-5 h-5\" />\n                </div>\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-sm text-muted-foreground mb-1\">Adresse</p>\n                  <p className=\"font-semibold\">{adresse}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Contact Form */}\n        <Card className=\"w-full\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MessageSquare className=\"text-primary w-5 h-5\" />\n              Envoyez-nous un message\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"nom\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nom *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Votre nom\" \n                          className=\"input-field\"\n                          data-testid=\"input-nom\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"telephone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Téléphone *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"+241 XX XX XX XX\" \n                          className=\"input-field\"\n                          data-testid=\"input-telephone\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"message\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Message *</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Votre message...\" \n                          className=\"input-field\"\n                          rows={5}\n                          data-testid=\"textarea-message\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"btn-primary w-full\" \n                  disabled={createMessageMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  <Send className=\"w-4 h-4 mr-2\" />\n                  {createMessageMutation.isPending ? \"Envoi en cours...\" : \"Envoyer le message\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Business Hours */}\n        <div className=\"mt-6 bg-secondary/50 rounded-lg p-4 border-2 border-accent/30 w-full\">\n          <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n            <Clock className=\"text-accent-foreground w-4 h-4\" />\n            Horaires d'ouverture\n          </h4>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\" data-testid=\"hours-weekday\">\n              <span className=\"text-muted-foreground\">Lundi - Vendredi</span>\n              <span className=\"font-medium\">8h00 - 18h00</span>\n            </div>\n            <div className=\"flex justify-between\" data-testid=\"hours-saturday\">\n              <span className=\"text-muted-foreground\">Samedi</span>\n              <span className=\"font-medium\">9h00 - 15h00</span>\n            </div>\n            <div className=\"flex justify-between\" data-testid=\"hours-sunday\">\n              <span className=\"text-muted-foreground\">Dimanche</span>\n              <span className=\"font-medium\">Fermé</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10732},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/payment.tsx":{"content":"import { ArrowLeft, Clock, Smartphone, CreditCard, Info, Lock } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { processPayment } from \"@/lib/payment\";\n\nexport default function Payment() {\n  const handlePaymentAttempt = async () => {\n    const result = await processPayment({\n      amount: 50000,\n      method: 'airtel',\n      userInfo: { nom: 'Test User', telephone: '+241 XX XX XX XX' },\n      serviceInfo: { type: 'regulier', forfait: 'Garde régulière' }\n    });\n    \n    if (result.error) {\n      alert(result.error);\n    }\n  };\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-accent p-4 sm:p-6 sticky top-0 z-10\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-foreground\" data-testid=\"button-back\">\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n          </Link>\n          <div>\n            <h2 className=\"text-xl font-bold text-foreground font-heading\">Mon paiement</h2>\n            <p className=\"text-sm text-muted-foreground\">Bientôt disponible</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-4 sm:p-6 pb-32\">\n        {/* Coming Soon Banner */}\n        <Card className=\"bg-accent/20 border-2 border-accent mb-6\">\n          <CardContent className=\"text-center py-8\">\n            <Clock className=\"w-12 h-12 text-accent-foreground mb-4 mx-auto\" />\n            <h3 className=\"font-heading font-bold text-xl mb-2\">Paiement mobile bientôt disponible</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Vous pourrez bientôt régler vos prestations directement depuis l'application.\n            </p>\n            <div className=\"service-badge\">En cours de développement</div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Methods Preview */}\n        <h3 className=\"font-heading font-semibold text-lg mb-4\">Méthodes de paiement à venir</h3>\n\n        {/* Airtel Money */}\n        <Card className=\"mb-3 opacity-60 pointer-events-none\" data-testid=\"payment-method-airtel\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                <Smartphone className=\"w-6 h-6 text-red-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold\">Airtel Money</h4>\n                <p className=\"text-sm text-muted-foreground\">Paiement mobile sécurisé</p>\n              </div>\n              <i className=\"fas fa-chevron-right text-muted-foreground\"></i>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Moov Money */}\n        <Card className=\"mb-3 opacity-60 pointer-events-none\" data-testid=\"payment-method-moov\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <Smartphone className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold\">Moov Money</h4>\n                <p className=\"text-sm text-muted-foreground\">Paiement mobile instantané</p>\n              </div>\n              <i className=\"fas fa-chevron-right text-muted-foreground\"></i>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* CinetPay */}\n        <Card className=\"mb-6 opacity-60 pointer-events-none\" data-testid=\"payment-method-cinetpay\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                <CreditCard className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold\">CinetPay</h4>\n                <p className=\"text-sm text-muted-foreground\">Carte bancaire et mobile money</p>\n              </div>\n              <i className=\"fas fa-chevron-right text-muted-foreground\"></i>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Disabled Payment Button */}\n        <Button \n          disabled \n          className=\"btn-primary w-full opacity-60 pointer-events-none mb-4\"\n          onClick={handlePaymentAttempt}\n          data-testid=\"button-pay-disabled\"\n        >\n          <Lock className=\"w-4 h-4 mr-2\" />\n          Payer maintenant\n        </Button>\n\n        {/* Info Message */}\n        <div className=\"bg-muted/30 rounded-lg p-4\">\n          <div className=\"flex gap-3\">\n            <Info className=\"text-muted-foreground w-5 h-5 mt-0.5\" />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">\n                L'intégration des services de paiement est en cours. Vous serez notifié dès qu'ils seront disponibles.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5275},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport passport from \"./auth\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { ensureAdminExists } from \"./init-db\";\n\nconst app = express();\nconst PgStore = connectPgSimple(session);\n\n// Trust Replit's reverse proxy - CRITICAL for secure cookies to work\napp.set('trust proxy', 1);\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\n// Increase JSON body limit to handle multiple base64 file uploads\n// 5MB file = ~7MB base64, allow up to 3-4 files max = ~30MB\napp.use(express.json({\n  limit: '30mb', // Allow up to 30MB JSON payloads for multiple file uploads\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false, limit: '30mb' }));\n\n// Verify SESSION_SECRET is set in production\nif (process.env.NODE_ENV === \"production\" && !process.env.SESSION_SECRET) {\n  throw new Error(\"SESSION_SECRET environment variable must be set in production\");\n}\n\n// Session configuration - Fix for Replit cross-site cookie issue\n// Replit uses HTTPS even in dev, so we need sameSite=\"none\" + secure=true\n// In local dev (HTTP), we use sameSite=\"lax\" + secure=false\nconst isSecureContext = !!process.env.REPL_ID || process.env.NODE_ENV === \"production\";\n\n// Use PostgreSQL for session storage (required for Autoscale deployments)\napp.use(\n  session({\n    store: new PgStore({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: true, // Auto-create session table if needed\n    }),\n    secret: process.env.SESSION_SECRET || \"dev-secret-only-for-development\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: isSecureContext,\n      httpOnly: true,\n      sameSite: isSecureContext ? \"none\" : \"lax\",\n      maxAge: 1000 * 60 * 60 * 24 * 7, // 7 days\n    },\n  })\n);\n\n// Initialize passport\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize database and ensure admin user exists\n  await ensureAdminExists();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3960},"client/src/pages/parent-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, User, ClipboardCheck, Send, CheckCircle } from \"lucide-react\";\nimport { Link, useSearch } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { insertParentRequestSchema, type Prestation } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { localStorage } from \"@/lib/storage\";\nimport parentFormImage from \"@assets/stock_images/happy_african_childr_f11fd4ba.jpg\";\n\nexport default function ParentForm() {\n  const [showSuccess, setShowSuccess] = useState(false);\n  const searchParams = useSearch();\n\n  const { data: prestations = [], isLoading: prestationsLoading } = useQuery<Prestation[]>({\n    queryKey: [\"/api/prestations\"],\n  });\n  \n  // Parse URL query parameters\n  const urlParams = new URLSearchParams(searchParams);\n  const preSelectedService = urlParams.get('service') || \"\";\n  const preSelectedForfait = urlParams.get('forfait') || urlParams.get('service') || \"\";\n\n  const form = useForm({\n    resolver: zodResolver(insertParentRequestSchema),\n    defaultValues: {\n      nom: \"\",\n      telephone: \"\",\n      adresse: \"\",\n      typeService: preSelectedService,\n      horaireDebut: \"\",\n      horaireFin: \"\",\n      nombreEnfants: 1,\n      forfait: \"\",\n      commentaires: \"\",\n    },\n  });\n  \n  // Update form values when URL params and prestations are loaded\n  useEffect(() => {\n    if (preSelectedService) {\n      form.setValue('typeService', preSelectedService);\n    }\n    \n    // Set forfait only if it exists in the loaded prestations\n    if (preSelectedForfait && !prestationsLoading && prestations.length > 0) {\n      const validForfait = prestations.find(p => p.id === preSelectedForfait);\n      if (validForfait) {\n        form.setValue('forfait', preSelectedForfait);\n      }\n    }\n  }, [preSelectedService, preSelectedForfait, prestations, prestationsLoading, form]);\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // Try to submit to server first\n      try {\n        const response = await apiRequest(\"POST\", \"/api/parent-requests\", data);\n        return await response.json();\n      } catch (error) {\n        // If server is offline, store locally\n        await localStorage.storeParentRequest(data);\n        return { offline: true };\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/parent-requests\"] });\n      setShowSuccess(true);\n      form.reset();\n      setTimeout(() => setShowSuccess(false), 5000);\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createRequestMutation.mutate(data);\n  };\n\n  if (showSuccess) {\n    return (\n      <div className=\"mobile-container min-h-screen bg-background\">\n        <div className=\"bg-primary p-4 sm:p-6\">\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n            </Link>\n            <div>\n              <h2 className=\"text-xl font-bold text-white font-heading\">Demande envoyée</h2>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-4 sm:p-6 pb-32 flex items-center justify-center min-h-[60vh]\">\n          <Card className=\"w-full text-center\">\n            <CardContent className=\"pt-6\">\n              <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n              <h3 className=\"font-heading font-bold text-xl mb-2\">Demande enregistrée avec succès !</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Notre équipe vous contactera sous peu pour finaliser votre demande.\n              </p>\n              <Link href=\"/\">\n                <Button data-testid=\"button-return-home\" className=\"btn-primary\">\n                  Retourner à l'accueil\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-background\">\n      {/* Header with Image */}\n      <div className=\"relative overflow-hidden\">\n        <img \n          src={parentFormImage} \n          alt=\"Enfants heureux\" \n          className=\"w-full h-48 object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-primary/90 to-primary/40 flex items-end p-4 sm:p-6\">\n          <div className=\"flex items-center gap-4 w-full\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n            </Link>\n            <div>\n              <h2 className=\"text-xl font-bold text-white font-heading\">Je cherche une nounou</h2>\n              <p className=\"text-sm text-white/90\">Remplissez le formulaire ci-dessous</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Form Content */}\n      <div className=\"p-4 sm:p-6 pb-32 w-full\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Personal Info Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <User className=\"text-primary w-5 h-5\" />\n                  Informations personnelles\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"nom\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nom complet *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Votre nom complet\" \n                          className=\"input-field\"\n                          data-testid=\"input-nom\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"telephone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Téléphone *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"+241 XX XX XX XX\" \n                          className=\"input-field\"\n                          data-testid=\"input-telephone\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"adresse\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Adresse / Quartier *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Votre quartier\" \n                          className=\"input-field\"\n                          data-testid=\"input-adresse\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Service Details Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ClipboardCheck className=\"text-accent-foreground w-5 h-5\" />\n                  Détails du service\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"typeService\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Type de service recherché *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"input-field\" data-testid=\"select-type-service\">\n                            <SelectValue placeholder=\"Sélectionnez un service\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"regulier\">Garde régulière</SelectItem>\n                          <SelectItem value=\"occasionnel\">Garde occasionnelle</SelectItem>\n                          <SelectItem value=\"weekend\">Week-end</SelectItem>\n                          <SelectItem value=\"devoirs\">Aide aux devoirs</SelectItem>\n                          <SelectItem value=\"personne\">Aide à la personne (mobilité réduite)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <FormField\n                    control={form.control}\n                    name=\"horaireDebut\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Heure de début</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            type=\"time\" \n                            className=\"input-field\"\n                            data-testid=\"input-horaire-debut\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"horaireFin\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Heure de fin</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            type=\"time\" \n                            className=\"input-field\"\n                            data-testid=\"input-horaire-fin\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"nombreEnfants\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nombre d'enfants *</FormLabel>\n                      <Select onValueChange={(value) => field.onChange(parseInt(value))} defaultValue={field.value.toString()}>\n                        <FormControl>\n                          <SelectTrigger className=\"input-field\" data-testid=\"select-nombre-enfants\">\n                            <SelectValue placeholder=\"Sélectionnez\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"1\">1 enfant</SelectItem>\n                          <SelectItem value=\"2\">2 enfants</SelectItem>\n                          <SelectItem value=\"3\">3 enfants</SelectItem>\n                          <SelectItem value=\"4\">4 enfants ou plus</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"forfait\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Forfait choisi *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value} disabled={prestationsLoading}>\n                        <FormControl>\n                          <SelectTrigger className=\"input-field\" data-testid=\"select-forfait\">\n                            <SelectValue placeholder={prestationsLoading ? \"Chargement des forfaits...\" : \"Sélectionnez un forfait\"} />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {prestationsLoading ? (\n                            <SelectItem value=\"loading\" disabled>Chargement...</SelectItem>\n                          ) : prestations.length === 0 ? (\n                            <SelectItem value=\"empty\" disabled>Aucun forfait disponible</SelectItem>\n                          ) : (\n                            prestations.map((prestation) => (\n                              <SelectItem key={prestation.id} value={prestation.id}>\n                                {prestation.nom} - {prestation.prix > 0 ? `${prestation.prix.toLocaleString()} ${prestation.unite}` : prestation.unite}\n                              </SelectItem>\n                            ))\n                          )}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"commentaires\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Commentaires additionnels</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Informations supplémentaires...\" \n                          className=\"input-field\"\n                          rows={4}\n                          data-testid=\"textarea-commentaires\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Submit Button */}\n            <Button \n              type=\"submit\" \n              className=\"btn-primary w-full\" \n              disabled={createRequestMutation.isPending}\n              data-testid=\"button-submit\"\n            >\n              <Send className=\"w-4 h-4 mr-2\" />\n              {createRequestMutation.isPending ? \"Envoi en cours...\" : \"Envoyer ma demande\"}\n            </Button>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15482},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"client/src/lib/payment.ts":{"content":"// Payment processing module - prepared for future integration\nexport type PaymentMethod = 'airtel' | 'moov' | 'cinetpay';\n\nexport interface PaymentData {\n  amount: number;\n  method: PaymentMethod;\n  userInfo: {\n    nom: string;\n    telephone: string;\n  };\n  serviceInfo: {\n    type: string;\n    forfait: string;\n  };\n}\n\nexport const processPayment = (paymentData: PaymentData): Promise<{ success: boolean; transactionId?: string; error?: string }> => {\n  return new Promise((resolve) => {\n    // Placeholder for future payment integration\n    // This function will be connected to Airtel Money, Moov Money, or CinetPay\n    \n    switch (paymentData.method) {\n      case 'airtel':\n        // Future: Airtel Money integration\n        // Redirect to Airtel payment URL or API call\n        console.log('Airtel Money integration pending');\n        break;\n        \n      case 'moov':\n        // Future: Moov Money integration\n        // Redirect to Moov payment URL or API call\n        console.log('Moov Money integration pending');\n        break;\n        \n      case 'cinetpay':\n        // Future: CinetPay integration\n        // API call to CinetPay\n        console.log('CinetPay integration pending');\n        break;\n        \n      default:\n        console.log(`Payment method ${paymentData.method} not supported yet`);\n    }\n    \n    // For now, return pending status\n    resolve({\n      success: false,\n      error: `Paiement de ${paymentData.amount} FCFA via ${paymentData.method} (en attente d'activation).`\n    });\n  });\n};\n\nexport const checkPaymentStatus = (transactionId: string): Promise<{ status: 'pending' | 'confirmed' | 'failed' }> => {\n  return new Promise((resolve) => {\n    // Future: Check payment status from provider\n    resolve({ status: 'pending' });\n  });\n};\n\nexport const initializePayment = (userData: any, serviceData: any): PaymentData => {\n  return {\n    amount: serviceData.prix,\n    method: 'airtel', // Default method\n    userInfo: {\n      nom: userData.nom,\n      telephone: userData.telephone\n    },\n    serviceInfo: {\n      type: serviceData.type,\n      forfait: serviceData.forfait\n    }\n  };\n};\n","size_bytes":2127},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Search, UserPlus, ClipboardList, Phone, CreditCard, Baby, Info } from \"lucide-react\";\n\nexport default function Home() {\n  return (\n    <div className=\"mobile-container min-h-screen bg-gradient-to-b from-background to-white\">\n      {/* Hero Header with Gradient */}\n      <div className=\"hero-gradient py-12 sm:py-16 px-4 sm:px-6\">\n        <div className=\"text-center\">\n          <div className=\"w-20 h-20 mx-auto bg-white/95 rounded-full flex items-center justify-center mb-4 shadow-lg animate-float\">\n            <Baby className=\"w-10 h-10 text-primary\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-white mb-2 font-heading drop-shadow-lg\">\n            Dieu veille<br />sur nos enfants\n          </h1>\n          <p className=\"text-white font-medium drop-shadow\">\n            Service de garde d'enfants au Gabon\n          </p>\n        </div>\n      </div>\n\n      {/* Main Navigation Cards */}\n      <div className=\"px-4 sm:px-6 -mt-6 pb-28\">\n        <div className=\"grid gap-4 sm:gap-6 w-full\">\n          {/* Parent Request Card */}\n          <Link href=\"/parent-form\">\n            <div \n              data-testid=\"card-parent-request\"\n              className=\"nav-card nav-card-animated nav-card-delay-1\"\n            >\n              <div className=\"flex items-center gap-4\">\n                <div className=\"icon-circle bg-primary/20\">\n                  <Search className=\"text-primary w-6 h-6\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-heading font-semibold text-lg mb-1\">\n                    Je cherche une nounou\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Trouvez la personne idéale pour vos enfants\n                  </p>\n                </div>\n                <i className=\"fas fa-chevron-right text-muted-foreground\"></i>\n              </div>\n            </div>\n          </Link>\n\n          {/* Nanny Application Card */}\n          <Link href=\"/nanny-form\">\n            <div \n              data-testid=\"card-nanny-application\"\n              className=\"nav-card nav-card-animated nav-card-delay-2\"\n            >\n              <div className=\"flex items-center gap-4\">\n                <div className=\"icon-circle bg-accent/30\">\n                  <UserPlus className=\"text-accent-foreground w-6 h-6\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-heading font-semibold text-lg mb-1\">\n                    Je veux postuler\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Rejoignez notre équipe de professionnels\n                  </p>\n                </div>\n                <i className=\"fas fa-chevron-right text-muted-foreground\"></i>\n              </div>\n            </div>\n          </Link>\n\n          {/* Services Card */}\n          <Link href=\"/services\">\n            <div \n              data-testid=\"card-services\"\n              className=\"nav-card nav-card-animated nav-card-delay-3\"\n            >\n              <div className=\"flex items-center gap-4\">\n                <div className=\"icon-circle bg-secondary\">\n                  <ClipboardList className=\"text-secondary-foreground w-6 h-6\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-heading font-semibold text-lg mb-1\">\n                    Prestations & tarifs\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Découvrez nos services et tarifs\n                  </p>\n                </div>\n                <i className=\"fas fa-chevron-right text-muted-foreground\"></i>\n              </div>\n            </div>\n          </Link>\n\n          {/* Contact Card */}\n          <Link href=\"/contact\">\n            <div \n              data-testid=\"card-contact\"\n              className=\"nav-card nav-card-animated nav-card-delay-4\"\n            >\n              <div className=\"flex items-center gap-4\">\n                <div className=\"icon-circle bg-muted\">\n                  <Phone className=\"text-foreground w-6 h-6\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-heading font-semibold text-lg mb-1\">\n                    Nous contacter\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Une question ? Écrivez-nous\n                  </p>\n                </div>\n                <i className=\"fas fa-chevron-right text-muted-foreground\"></i>\n              </div>\n            </div>\n          </Link>\n        </div>\n\n        {/* Payment Section (Disabled) */}\n        <div className=\"mt-6 relative w-full\">\n          <div className=\"coming-soon-badge\">Bientôt</div>\n          <Link href=\"/payment\">\n            <div \n              data-testid=\"card-payment-disabled\"\n              className=\"card opacity-60 pointer-events-none\"\n            >\n              <div className=\"flex items-center gap-4\">\n                <div className=\"icon-circle bg-primary/20\">\n                  <CreditCard className=\"text-primary w-6 h-6\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-heading font-semibold text-lg mb-1\">\n                    Mon paiement\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Paiement mobile bientôt disponible\n                  </p>\n                </div>\n              </div>\n            </div>\n          </Link>\n        </div>\n\n        {/* Info Banner */}\n        <div className=\"mt-6 bg-secondary/50 rounded-lg p-4 border-2 border-accent/30 w-full\">\n          <div className=\"flex gap-3\">\n            <Info className=\"text-accent-foreground w-5 h-5 mt-0.5\" />\n            <div>\n              <p className=\"text-sm font-medium text-foreground mb-1\">\n                Service professionnel et sécurisé\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                Toutes nos nounous sont vérifiées et formées pour assurer la sécurité de vos enfants.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6318},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50 px-4\">\n      <Card className=\"w-full\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":702},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"replit.md":{"content":"# Dieu veille sur nos enfants - Childcare Service Application\n\n## Overview\n\nA mobile-first web application for a Gabonese childcare and home assistance service. The platform connects parents seeking childcare services with qualified nannies, provides service information, and is prepared for mobile payment integration. It is built as a Progressive Web App (PWA) suitable for mobile installation and app store publishing. The project's vision is to streamline childcare and home assistance services, offering market potential for efficient, reliable connections between service providers and families.\n\n## Recent Changes (October 2025)\n\n### Real-Time UI Updates & Document Transfer Fix (Latest - October 20, 2025)\n- **Auto-Refresh Implementation**: Forms now trigger automatic UI updates in admin dashboard\n  - parent-form.tsx: Added cache invalidation for `/api/parent-requests` after submission\n  - nanny-form.tsx: Added cache invalidation for `/api/nanny-applications` after submission\n  - Impact: Admin dashboard automatically shows new candidatures/demandes without manual page refresh\n  - Solves issue where 50+ submissions would require 50+ manual refreshes\n  \n- **Document Transfer Fix**: Documents now properly visible in employee dossiers\n  - Root cause: UI was displaying `employeeApplication.documents` (undefined) instead of `selectedEmployee.documents`\n  - Fixed admin.tsx line 1110-1111 to use correct variable\n  - Backend already copied documents correctly (server/routes.ts line 927)\n  - Documents uploaded during candidature now appear in employee dossier after acceptance\n  - E2E tested: Upload document → Submit candidature → Accept → Document visible in employee dossier ✅\n\n### Payment Configuration System (October 20, 2025)\n- **Payment Provider Management**: Administrators can now configure mobile payment providers\n  - New `/admin/payment-config` page for managing payment methods\n  - Support for 3 providers: Airtel Money, Moov Money, and CinetPay\n  - Each provider has:\n    - Activation toggle (actif/inactif status)\n    - API key field (masked by default with show/hide toggle)\n    - API secret field (masked by default with show/hide toggle)\n    - Config JSON field for additional parameters (URLs, merchant IDs, etc.)\n  - Database table `payment_configs` with fields: provider, actif, api_key, api_secret, config_json, date_modification\n  - API endpoints:\n    - GET `/api/payment-configs` - List all configurations\n    - GET `/api/payment-configs/:provider` - Get specific provider config\n    - PUT `/api/payment-configs/:provider` - Update provider configuration\n  - Security features:\n    - All routes protected by authentication\n    - API keys masked in UI (showing only last 4 characters)\n    - Secure password-type inputs with visibility toggle\n  - E2E tested: Activate/deactivate providers, save configurations, verify persistence\n\n### Admin Profile Editing (October 16, 2025)\n- **Profile Edit Feature**: Administrators can now edit their own profile information\n  - PUT `/api/admin/profile` - Update username, nom (full name), and email\n  - Edit mode toggle with \"Modifier\" button in profile page\n  - Form validation using `updateAdminProfileSchema` (Zod)\n  - Session automatically refreshed after successful update\n  - Success toast notification on save\n  - E2E tested: Edit profile → Save → Verify updated values → Restore original\n  - React warning fixed: moved setValue calls to useEffect\n\n### Delete Workflows + Object Storage (October 16, 2025)\n- **Deletion System**: Complete delete workflows with confirmation dialogs\n  - DELETE `/api/employees/:id` - Remove employees with AlertDialog confirmation\n  - DELETE `/api/nanny-applications/:id` - Remove candidatures (accepted/rejected only)\n  - \"Retirer l'employé\" button in employee dialog (red, destructive)\n  - \"Supprimer la candidature\" button for terminal status candidatures\n  - Both deletions require explicit confirmation via AlertDialog\n  - Success toasts and cache invalidation after deletion\n  - E2E tested: Accept candidature → Create employee → Delete candidature → Delete employee\n\n- **Object Storage Integration (Optional)**:\n  - Disabled by default (uses base64 encoding for documents)\n  - Can be enabled via `ENABLE_OBJECT_STORAGE=true` + Replit bucket creation\n  - Route `/api/upload` - Stores in Object Storage or base64 based on availability\n  - Route `/api/download/:path(*)` - Downloads from Object Storage\n  - Legacy document handling: Documents without storedPath prefixed with \"legacy-\"\n  - View/download functions detect legacy docs and show graceful error toasts\n  - No crashes on missing/corrupted documents\n\n- **Document Safety**: \n  - parseDocuments() ensures all documents have storedPath\n  - Legacy documents (base64) never routed to Object Storage\n  - viewDocument() and downloadDocument() guard against invalid paths\n  - Controlled error messages instead of 404 crashes\n\n### Accept/Reject Candidature Bug Fix (October 16, 2025)\n- **Issue Fixed**: Resolved 400 error when accepting/rejecting nanny candidatures\n  - Root cause: Frontend sent status values with accents (\"accepté\", \"refusé\") but backend expected unaccented values (\"accepte\", \"refuse\")\n  - Fixed acceptApplicationMutation to send \"accepte\" instead of \"accepté\"\n  - Fixed rejectApplicationMutation to send \"refuse\" instead of \"refusé\"\n- **UI Enhancement**: Terminal statuses now displayed as colored badges\n  - Accepted candidatures show green \"Accepté\" badge (read-only)\n  - Rejected candidatures show red \"Refusé\" badge (read-only)\n  - In-progress statuses use dropdown: \"En examen\", \"En attente\", \"Traité\"\n  - Accept/Reject actions must use dedicated buttons (complete workflow with employee creation)\n- **Payment Form Fix**: Changed all \"periode\" references to \"motif\" for consistency with backend schema\n- **Testing**: E2E tests confirm Accept/Reject workflows return 200 without errors\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- React 18 with TypeScript\n- Vite for development and bundling\n- Wouter for client-side routing\n- Tailwind CSS for styling, supplemented by shadcn/ui (Radix UI primitives)\n- TanStack Query (React Query) for server state management\n\n**Design System:**\n- Green and orange color palette (Green: hsl 145, 63%, 49%; Orange: hsl 25, 95%, 53%; Accent: hsl 35, 90%, 65%; Background: hsl 145, 25%, 97%).\n- Custom fonts (Inter, Poppins, Quicksand).\n- Mobile-first responsive design with bottom navigation.\n- PWA readiness with `manifest.json`.\n- Visual enhancements include hero images with gradient overlays, improved card shadows, and smooth CSS animations (staggered slide-up, hover effects).\n\n**Core Features:**\n- Dynamic loading of services, contact information, and forfait options from API.\n- Comprehensive form validation with French error messages.\n- Admin navigation accessible to authenticated users.\n\n### Backend Architecture\n\n**Server Framework:**\n- Express.js with TypeScript.\n- RESTful API endpoints under `/api`.\n\n**Data Validation:**\n- Zod schemas for shared client/server validation.\n- Runtime validation on API requests.\n\n### Data Storage Solutions\n\n**Database:**\n- PostgreSQL via Neon serverless.\n- Drizzle ORM for type-safe operations.\n- Drizzle Kit for migration management.\n\n**Schema Design:**\n- `parent_requests`: Childcare service requests.\n- `nanny_applications`: Caregiver applications.\n- `contact_messages`: General inquiries.\n- `notifications`: Admin notifications.\n- `payments`: Payment records (future use).\n- `payment_configs`: Payment provider configurations (Airtel Money, Moov Money, CinetPay).\n- `prestations`: Service packages.\n- `parametres_site`: Editable site contact information.\n- `employees`: Employee records.\n- `paiements_employes`: Employee payment history.\n\n**Storage Implementation:**\n- Production: PostgreSQL via `DbStorage`.\n- Development/Testing: In-memory `MemStorage`.\n- Client-side: IndexedDB for offline persistence.\n\n### Authentication and Authorization\n\n**Admin Authentication:**\n- Passport.js with local strategy.\n- Bcryptjs for password hashing (10 salt rounds).\n- Express sessions with secure cookie configuration.\n- Default admin credentials (username=\"admin\", password=\"admin123\") to be changed in production.\n- Admin users stored in `admin_users` table.\n\n**Session Management:**\n- Cookie-based sessions (7-day expiration).\n- Secure flags (`httpOnly`, `secure`, `sameSite=lax`) in production.\n- `SESSION_SECRET` required in production.\n\n**Protected Routes:**\n- Admin dashboard and management endpoints require authentication.\n- Public API endpoints are open.\n\n### System Features\n\n**Admin Dashboard:**\n- Statistics cards.\n- Tabbed interface with collapsible detail cards.\n- Real-time status management for parent requests, nanny applications, and contact messages.\n- CRUD interface for managing service packages (prestations) and site parameters.\n- Employee management, including acceptance of nanny applications and payment creation.\n- Payment provider configuration page for managing API keys and settings.\n- Admin profile page for user info and password changes.\n\n**Notification System:**\n- In-app notifications in the admin dashboard with badge counter and popover list.\n- Auto-generated notifications for new requests, applications, messages, and matches.\n- `notifications` table stores notification details.\n\n**Matching System:**\n- Algorithm in `shared/matching.ts` calculates compatibility scores (0-100%) based on service type, location, experience, and availability.\n- Admin matching page displays suggestions, details, and call-to-action buttons.\n- Automatic match notifications for scores ≥ 50%.\n\n## External Dependencies\n\n**UI Component Libraries:**\n- Radix UI primitives\n- shadcn/ui\n- Embla Carousel\n- Lucide React (icons)\n- cmdk (command palette)\n\n**Database & ORM:**\n- Neon Serverless PostgreSQL (`@neondatabase/serverless`)\n- Drizzle ORM (`drizzle-orm`)\n- Drizzle Kit\n\n**Form & Validation:**\n- React Hook Form\n- Zod\n- `@hookform/resolvers`\n- `drizzle-zod`\n\n**Payment Integration:**\n- Admin configuration interface for Airtel Money, Moov Money, and CinetPay.\n- Secure storage of API credentials with masked display.\n- Database-backed configuration management.\n- Ready for integration with payment provider APIs.\n\n**Utilities:**\n- `date-fns`\n- `clsx`, `tailwind-merge`, `class-variance-authority`\n- `nanoid`\n\n**Service Data:**\n- `prestations` export from the schema for a predefined service catalog.","size_bytes":10529},"client/src/components/bottom-navigation.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Link } from \"wouter\";\nimport { Home, List, CreditCard, Phone, Shield } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst navigationItems = [\n  { path: \"/\", label: \"Accueil\", icon: Home, testId: \"nav-home\" },\n  { path: \"/services\", label: \"Services\", icon: List, testId: \"nav-services\" },\n  { path: \"/payment\", label: \"Paiement\", icon: CreditCard, testId: \"nav-payment\" },\n  { path: \"/contact\", label: \"Contact\", icon: Phone, testId: \"nav-contact\" },\n];\n\nexport default function BottomNavigation() {\n  const [location] = useLocation();\n  \n  // Check if user is authenticated\n  const { data: authData } = useQuery({\n    queryKey: ['/api/auth/user'],\n    retry: false,\n    refetchInterval: 60000, // Refresh every minute\n    throwOnError: false, // Tolerate 401 errors when not authenticated\n  });\n\n  const isAuthenticated = (authData as any)?.user;\n  const isAdminPage = location.startsWith('/admin');\n\n  return (\n    <div className=\"floating-nav\">\n      <div className=\"flex justify-around items-center\">\n        {navigationItems.map(({ path, label, icon: Icon, testId }) => (\n          <Link key={path} href={path}>\n            <button\n              data-testid={testId}\n              className={`nav-item ${location === path ? \"active\" : \"\"}`}\n            >\n              <Icon className=\"w-5 h-5\" />\n              <span className=\"text-xs font-medium\">{label}</span>\n            </button>\n          </Link>\n        ))}\n        \n        {/* Admin button - only visible when authenticated */}\n        {isAuthenticated && (\n          <Link href=\"/admin\">\n            <button\n              data-testid=\"nav-admin\"\n              className={`nav-item ${isAdminPage ? \"active\" : \"\"}`}\n            >\n              <Shield className=\"w-5 h-5\" />\n              <span className=\"text-xs font-medium\">Admin</span>\n            </button>\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1961},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/pages/services.tsx":{"content":"import { ArrowLeft, Clock, Calendar, CalendarDays, BookOpen, Heart, CreditCard, Shield } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport type { Prestation } from \"@shared/schema\";\n\nexport default function Services() {\n  const [, setLocation] = useLocation();\n\n  const { data: prestations = [], isLoading } = useQuery<Prestation[]>({\n    queryKey: [\"/api/prestations\"],\n  });\n\n  const getServiceIcon = (serviceId: string) => {\n    const icons = {\n      regulier: Clock,\n      occasionnel: Calendar,\n      weekend: CalendarDays,\n      devoirs: BookOpen,\n      personne: Heart,\n    };\n    return icons[serviceId as keyof typeof icons] || Clock;\n  };\n\n  const selectService = (serviceType: string, price: number) => {\n    // In a real app, this would pre-fill the parent form\n    // For now, we'll navigate to the form with URL params\n    setLocation(`/parent-form?service=${serviceType}&price=${price}`);\n  };\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-secondary p-4 sm:p-6 sticky top-0 z-10\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-foreground\" data-testid=\"button-back\">\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n          </Link>\n          <div>\n            <h2 className=\"text-xl font-bold text-foreground font-heading\">Prestations & Tarifs</h2>\n            <p className=\"text-sm text-muted-foreground\">Nos services professionnels</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Services List */}\n      <div className=\"p-4 sm:p-6 pb-32 w-full\">\n        {isLoading ? (\n          <p className=\"text-center text-muted-foreground\">Chargement des prestations...</p>\n        ) : prestations.length === 0 ? (\n          <p className=\"text-center text-muted-foreground\">Aucune prestation disponible pour le moment</p>\n        ) : (\n          prestations.map((service) => {\n            const IconComponent = getServiceIcon(service.id);\n          \n          return (\n            <Card key={service.id} className=\"mb-4 hover:shadow-lg transition-all\" data-testid={`service-card-${service.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start gap-4 mb-4\">\n                  <div className={`icon-circle ${service.id === 'regulier' ? 'bg-primary/20' : service.id === 'personne' ? 'bg-accent/30' : 'bg-secondary'}`}>\n                    <IconComponent className={`${service.id === 'regulier' ? 'text-primary' : service.id === 'personne' ? 'text-accent-foreground' : 'text-secondary-foreground'} w-6 h-6`} />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-heading font-semibold text-lg mb-1\">{service.nom}</h3>\n                    <p className=\"text-sm text-muted-foreground mb-2\">{service.description}</p>\n                    <div className=\"service-badge mb-3\">{service.unite}</div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-between border-t border-border pt-4\">\n                  <div>\n                    <p className=\"price-tag\">\n                      {service.prix > 0 ? `${service.prix.toLocaleString()} FCFA` : \"Sur devis\"}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {service.unite}\n                    </p>\n                  </div>\n                  <Button\n                    onClick={() => selectService(service.id, service.prix)}\n                    className=\"btn-secondary text-sm py-2 px-4\"\n                    data-testid={`button-select-${service.id}`}\n                  >\n                    {service.prix > 0 ? \"Choisir\" : \"Contacter\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          );\n          })\n        )}\n\n        {/* Payment Button (Disabled) */}\n        <div className=\"mt-6 relative\">\n          <div className=\"coming-soon-badge\">Bientôt disponible</div>\n          <Button \n            disabled \n            className=\"btn-primary w-full opacity-60 pointer-events-none\"\n            data-testid=\"button-payment-disabled\"\n          >\n            <CreditCard className=\"w-4 h-4 mr-2\" />\n            Procéder au paiement\n          </Button>\n          <p className=\"text-center text-sm text-muted-foreground mt-3\">\n            Le paiement mobile sera bientôt intégré\n          </p>\n        </div>\n\n        {/* Info Box */}\n        <div className=\"mt-6 bg-primary/10 rounded-lg p-4 border-2 border-primary/30\">\n          <div className=\"flex gap-3\">\n            <Shield className=\"text-primary w-5 h-5 mt-0.5\" />\n            <div>\n              <p className=\"font-medium text-foreground mb-1\">Qualité garantie</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Toutes nos prestations incluent une garantie de satisfaction et un suivi personnalisé.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5349},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/pages/admin-login.tsx":{"content":"import { useRef, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Lock, User, LogIn } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const usernameRef = useRef<HTMLInputElement>(null);\n  const passwordRef = useRef<HTMLInputElement>(null);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const username = usernameRef.current?.value || \"\";\n    const password = passwordRef.current?.value || \"\";\n\n    if (!username || !password) {\n      toast({\n        variant: \"destructive\",\n        title: \"Champs requis\",\n        description: \"Veuillez remplir tous les champs\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify({ username, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || \"Erreur de connexion\");\n      }\n\n      // Invalidate auth cache\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      \n      toast({\n        title: \"Connexion réussie\",\n        description: \"Bienvenue dans l'espace d'administration\",\n      });\n\n      // Redirect to admin\n      setTimeout(() => {\n        setLocation(\"/admin\");\n      }, 100);\n\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur de connexion\",\n        description: error.message || \"Identifiants incorrects\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-background flex items-center justify-center p-4 sm:p-6\">\n      <Card className=\"w-full\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mb-4\">\n            <Lock className=\"w-8 h-8 text-primary\" />\n          </div>\n          <CardTitle className=\"text-2xl font-heading\">Administration</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Connectez-vous pour accéder au panneau d'administration\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label htmlFor=\"username\" className=\"text-sm font-medium leading-none\">\n                Nom d'utilisateur\n              </label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-3 h-5 w-5 text-muted-foreground\" />\n                <input\n                  ref={usernameRef}\n                  id=\"username\"\n                  type=\"text\"\n                  className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 pl-10 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                  placeholder=\"admin\"\n                  autoComplete=\"username\"\n                  data-testid=\"input-username\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"password\" className=\"text-sm font-medium leading-none\">\n                Mot de passe\n              </label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-5 w-5 text-muted-foreground\" />\n                <input\n                  ref={passwordRef}\n                  id=\"password\"\n                  type=\"password\"\n                  className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 pl-10 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                  placeholder=\"••••••••\"\n                  autoComplete=\"current-password\"\n                  data-testid=\"input-password\"\n                />\n              </div>\n            </div>\n\n            <button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2 w-full btn-primary\"\n              data-testid=\"button-login\"\n            >\n              <LogIn className=\"w-4 h-4\" />\n              {isLoading ? \"Connexion...\" : \"Se connecter\"}\n            </button>\n          </form>\n\n          <div className=\"mt-6 text-center space-y-3\">\n            <p className=\"text-xs text-muted-foreground\">\n              Identifiants par défaut : admin / admin123\n            </p>\n            <div className=\"pt-3 border-t\">\n              <a \n                href=\"/simple-login\" \n                className=\"text-xs text-primary hover:underline\"\n                data-testid=\"link-simple-login\"\n              >\n                Problème de connexion ? Essayez la version simplifiée\n              </a>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5885},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport passport from \"./auth\";\nimport { isAuthenticated } from \"./auth\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcryptjs\";\nimport multer from \"multer\";\nimport { Client } from \"@replit/object-storage\";\n\n// Initialize Object Storage client (optional - requires bucket configuration)\n// Set ENABLE_OBJECT_STORAGE=true environment variable to use Object Storage\nlet objectStorageClient: Client | null = null;\nif (process.env.ENABLE_OBJECT_STORAGE === 'true') {\n  try {\n    objectStorageClient = new Client();\n    console.log(\"✓ Object Storage enabled and initialized\");\n  } catch (error: any) {\n    console.error(\"✗ Object Storage initialization failed:\", error.message);\n    console.warn(\"  Files will be stored as base64 in database\");\n  }\n} else {\n  console.log(\"ℹ Object Storage disabled (using base64 storage)\");\n  console.log(\"  To enable: create bucket in Replit UI (Tools → App Storage)\");\n  console.log(\"  Then set ENABLE_OBJECT_STORAGE=true environment variable\");\n}\nimport { \n  insertParentRequestSchema, \n  insertNannyApplicationSchema, \n  insertContactMessageSchema,\n  updateParentRequestStatusSchema,\n  updateNannyApplicationStatusSchema,\n  insertNotificationSchema,\n  insertPrestationSchema,\n  insertParametreSiteSchema,\n  insertEmployeeSchema,\n  insertPaiementEmployeSchema,\n  updateAdminProfileSchema,\n  updatePaymentConfigSchema\n} from \"@shared/schema\";\nimport { findBestMatches, getBestMatchForRequest, calculateMatchScore } from \"@shared/matching\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Simple HTML login page (no React, no frameworks)\n  app.get(\"/simple-login\", (req, res) => {\n    res.setHeader('Content-Type', 'text/html');\n    res.send(`<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Connexion Admin - Dieu veille sur nos enfants</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n            background: linear-gradient(135deg, hsl(145, 63%, 49%) 0%, hsl(25, 95%, 53%) 100%);\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 20px;\n        }\n        \n        .login-card {\n            background: white;\n            border-radius: 16px;\n            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);\n            padding: 40px;\n            width: 100%;\n            max-width: 400px;\n        }\n        \n        .lock-icon {\n            width: 64px;\n            height: 64px;\n            background: hsl(145, 63%, 49%);\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin: 0 auto 24px;\n            color: white;\n            font-size: 32px;\n        }\n        \n        h1 {\n            text-align: center;\n            color: #1a1a1a;\n            margin-bottom: 8px;\n            font-size: 24px;\n        }\n        \n        .subtitle {\n            text-align: center;\n            color: #666;\n            margin-bottom: 32px;\n            font-size: 14px;\n        }\n        \n        .form-group {\n            margin-bottom: 20px;\n        }\n        \n        label {\n            display: block;\n            margin-bottom: 8px;\n            color: #333;\n            font-size: 14px;\n            font-weight: 500;\n        }\n        \n        input {\n            width: 100%;\n            padding: 12px;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            font-size: 16px;\n            transition: border-color 0.2s;\n        }\n        \n        input:focus {\n            outline: none;\n            border-color: hsl(145, 63%, 49%);\n        }\n        \n        button {\n            width: 100%;\n            padding: 14px;\n            background: hsl(145, 63%, 49%);\n            color: white;\n            border: none;\n            border-radius: 8px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background 0.2s;\n        }\n        \n        button:hover {\n            background: hsl(145, 63%, 44%);\n        }\n        \n        button:disabled {\n            background: #ccc;\n            cursor: not-allowed;\n        }\n        \n        .error-message {\n            background: #fee;\n            color: #c33;\n            padding: 12px;\n            border-radius: 8px;\n            margin-bottom: 20px;\n            font-size: 14px;\n            display: none;\n        }\n        \n        .error-message.show {\n            display: block;\n        }\n        \n        .success-message {\n            background: #efe;\n            color: #3c3;\n            padding: 12px;\n            border-radius: 8px;\n            margin-bottom: 20px;\n            font-size: 14px;\n            display: none;\n        }\n        \n        .success-message.show {\n            display: block;\n        }\n        \n        .default-creds {\n            text-align: center;\n            margin-top: 20px;\n            padding: 12px;\n            background: hsl(145, 25%, 97%);\n            border-radius: 8px;\n            font-size: 13px;\n            color: #666;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"login-card\">\n        <div class=\"lock-icon\">🔒</div>\n        <h1>Administration</h1>\n        <p class=\"subtitle\">Connexion simple (sans frameworks)</p>\n        \n        <div id=\"errorMessage\" class=\"error-message\"></div>\n        <div id=\"successMessage\" class=\"success-message\"></div>\n        \n        <form id=\"loginForm\">\n            <div class=\"form-group\">\n                <label for=\"username\">Nom d'utilisateur</label>\n                <input type=\"text\" id=\"username\" name=\"username\" required autocomplete=\"username\">\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"password\">Mot de passe</label>\n                <input type=\"password\" id=\"password\" name=\"password\" required autocomplete=\"current-password\">\n            </div>\n            \n            <button type=\"submit\" id=\"submitBtn\">Se connecter</button>\n        </form>\n        \n        <div class=\"default-creds\">\n            Identifiants par défaut : admin / admin123\n        </div>\n    </div>\n    \n    <script>\n        const form = document.getElementById('loginForm');\n        const errorMessage = document.getElementById('errorMessage');\n        const successMessage = document.getElementById('successMessage');\n        const submitBtn = document.getElementById('submitBtn');\n        \n        form.addEventListener('submit', async (e) => {\n            e.preventDefault();\n            \n            // Disable button\n            submitBtn.disabled = true;\n            submitBtn.textContent = 'Connexion...';\n            \n            // Hide messages\n            errorMessage.classList.remove('show');\n            successMessage.classList.remove('show');\n            \n            const username = document.getElementById('username').value;\n            const password = document.getElementById('password').value;\n            \n            try {\n                const response = await fetch('/api/auth/login', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    credentials: 'include',\n                    body: JSON.stringify({ username, password })\n                });\n                \n                const data = await response.json();\n                \n                if (response.ok) {\n                    successMessage.textContent = 'Connexion réussie ! Redirection...';\n                    successMessage.classList.add('show');\n                    \n                    // Redirect to admin dashboard\n                    setTimeout(() => {\n                        window.location.href = '/admin';\n                    }, 1000);\n                } else {\n                    errorMessage.textContent = data.message || 'Erreur de connexion';\n                    errorMessage.classList.add('show');\n                    submitBtn.disabled = false;\n                    submitBtn.textContent = 'Se connecter';\n                }\n            } catch (error) {\n                errorMessage.textContent = 'Erreur réseau. Veuillez réessayer.';\n                errorMessage.classList.add('show');\n                submitBtn.disabled = false;\n                submitBtn.textContent = 'Se connecter';\n            }\n        });\n    </script>\n</body>\n</html>`);\n  });\n  \n  // Authentication routes\n  app.post(\"/api/auth/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Erreur d'authentification\" });\n      }\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Identifiants incorrects\" });\n      }\n      req.logIn(user, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Erreur de session\" });\n        }\n        const { passwordHash, ...userWithoutPassword } = user;\n        return res.json({ user: userWithoutPassword });\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Erreur de déconnexion\" });\n      }\n      res.json({ message: \"Déconnexion réussie\" });\n    });\n  });\n\n  app.get(\"/api/auth/user\", (req, res) => {\n    if (req.isAuthenticated() && req.user) {\n      const { passwordHash, ...userWithoutPassword } = req.user as any;\n      res.json({ user: userWithoutPassword });\n    } else {\n      res.status(401).json({ message: \"Non authentifié\" });\n    }\n  });\n\n  // Admin password change route\n  app.post(\"/api/admin/change-password\", isAuthenticated, async (req, res) => {\n    try {\n      const { currentPassword, newPassword } = req.body;\n      \n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ message: \"Mot de passe actuel et nouveau mot de passe requis\" });\n      }\n\n      if (newPassword.length < 6) {\n        return res.status(400).json({ message: \"Le nouveau mot de passe doit contenir au moins 6 caractères\" });\n      }\n\n      const sessionUser = req.user as any;\n      \n      if (!sessionUser || !sessionUser.id) {\n        return res.status(500).json({ message: \"Erreur d'authentification\" });\n      }\n      \n      // Fetch the latest admin user from database to prevent stale session attacks\n      const currentAdmin = await storage.getAdminById(sessionUser.id);\n      \n      if (!currentAdmin || !currentAdmin.passwordHash) {\n        return res.status(500).json({ message: \"Erreur d'authentification\" });\n      }\n      \n      // Verify current password against the latest hash from database\n      const isValidPassword = await bcrypt.compare(currentPassword, currentAdmin.passwordHash);\n      \n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Mot de passe actuel incorrect\" });\n      }\n\n      // Hash new password and update\n      const newPasswordHash = await bcrypt.hash(newPassword, 10);\n      await storage.updateAdminPassword(currentAdmin.id, newPasswordHash);\n\n      res.json({ message: \"Mot de passe changé avec succès\" });\n    } catch (error) {\n      console.error(\"Password change error:\", error);\n      res.status(500).json({ message: \"Erreur lors du changement de mot de passe\" });\n    }\n  });\n\n  // Admin profile update route\n  app.put(\"/api/admin/profile\", isAuthenticated, async (req, res) => {\n    try {\n      const sessionUser = req.user as any;\n      \n      if (!sessionUser || !sessionUser.id) {\n        return res.status(500).json({ message: \"Erreur d'authentification\" });\n      }\n\n      // Validate input\n      const result = updateAdminProfileSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          message: \"Données invalides\", \n          errors: result.error.issues \n        });\n      }\n\n      // Update profile\n      const updatedAdmin = await storage.updateAdminProfile(sessionUser.id, result.data);\n      \n      // Return updated user without password\n      const { passwordHash, ...userWithoutPassword } = updatedAdmin;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      console.error(\"Profile update error:\", error);\n      res.status(500).json({ message: \"Erreur lors de la mise à jour du profil\" });\n    }\n  });\n  \n  // File upload configuration\n  const upload = multer({\n    storage: multer.memoryStorage(),\n    limits: {\n      fileSize: 5 * 1024 * 1024, // 5MB max\n    },\n    fileFilter: (req, file, cb) => {\n      const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png'];\n      if (allowedTypes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error('Type de fichier non autorisé. Seuls les PDF, JPG et PNG sont acceptés.'));\n      }\n    },\n  });\n\n  // File upload route - stores files in Object Storage if available, otherwise base64\n  app.post(\"/api/upload\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"Aucun fichier fourni\" });\n      }\n\n      const timestamp = Date.now();\n      const originalName = req.file.originalname;\n      \n      // Try to upload to Object Storage if available\n      if (objectStorageClient) {\n        const storedPath = `documents/${timestamp}-${originalName}`;\n        const uploadResult = await objectStorageClient.uploadFromBytes(storedPath, req.file.buffer);\n        \n        if (!uploadResult.ok) {\n          throw new Error(uploadResult.error?.message || \"Erreur lors de l'upload vers Object Storage\");\n        }\n\n        // Return file info (Object Storage mode)\n        return res.json({\n          filename: originalName,\n          storedPath: storedPath,\n          size: req.file.size,\n          type: req.file.mimetype\n        });\n      } else {\n        // Fallback to base64 storage\n        const base64Data = req.file.buffer.toString('base64');\n        const fileId = `${timestamp}-${originalName}`;\n\n        // Return file info with base64 data (legacy mode)\n        return res.json({\n          filename: originalName,\n          storedPath: fileId,\n          size: req.file.size,\n          type: req.file.mimetype,\n          data: base64Data\n        });\n      }\n    } catch (error: any) {\n      console.error('Upload error:', error);\n      if (error.message && error.message.includes('Type de fichier')) {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ \n        message: \"Erreur lors de l'upload du fichier\",\n        details: error.message \n      });\n    }\n  });\n\n  // File download route - retrieves files from Object Storage (if available)\n  app.get(\"/api/download/:path(*)\", async (req, res) => {\n    try {\n      if (!objectStorageClient) {\n        return res.status(503).json({ \n          message: \"Object Storage non configuré. Veuillez utiliser les documents base64.\" \n        });\n      }\n\n      const filePath = req.params.path;\n      \n      // Download file from Object Storage\n      const downloadResult = await objectStorageClient.downloadAsBytes(filePath);\n      \n      if (!downloadResult.ok) {\n        return res.status(404).json({ message: \"Fichier non trouvé\" });\n      }\n\n      // Extract filename from path\n      const filename = filePath.split('/').pop() || 'download';\n      \n      // Set appropriate content type based on file extension\n      const extension = filename.split('.').pop()?.toLowerCase();\n      const contentTypes: Record<string, string> = {\n        'pdf': 'application/pdf',\n        'jpg': 'image/jpeg',\n        'jpeg': 'image/jpeg',\n        'png': 'image/png'\n      };\n      const contentType = contentTypes[extension || ''] || 'application/octet-stream';\n\n      // Send file\n      res.setHeader('Content-Type', contentType);\n      res.setHeader('Content-Disposition', `inline; filename=\"${filename}\"`);\n      res.send(downloadResult.value);\n    } catch (error: any) {\n      console.error('Download error:', error);\n      res.status(500).json({ \n        message: \"Erreur lors du téléchargement du fichier\",\n        details: error.message \n      });\n    }\n  });\n  \n  // Parent request routes\n  app.post(\"/api/parent-requests\", async (req, res) => {\n    try {\n      const data = insertParentRequestSchema.parse(req.body);\n      const request = await storage.createParentRequest(data);\n      \n      // Create notification for new parent request\n      await storage.createNotification({\n        type: \"nouvelle_demande\",\n        titre: \"Nouvelle demande parent\",\n        message: `${request.nom} a soumis une demande pour ${request.typeService}`,\n        relatedId: request.id\n      });\n\n      // Check for potential matches\n      const nannies = await storage.getNannyApplications();\n      const bestMatch = getBestMatchForRequest(request, nannies);\n      \n      if (bestMatch && bestMatch.score >= 50) {\n        await storage.createNotification({\n          type: \"nouveau_match\",\n          titre: \"Nouveau match trouvé!\",\n          message: `Match de ${bestMatch.score}% entre ${request.nom} et ${bestMatch.nanny.nom}`,\n          relatedId: request.id\n        });\n      }\n      \n      res.json(request);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    }\n  });\n\n  app.get(\"/api/parent-requests\", async (req, res) => {\n    try {\n      const requests = await storage.getParentRequests();\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/parent-requests/:id/status\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = updateParentRequestStatusSchema.parse(req.body);\n      \n      const updatedRequest = await storage.updateParentRequestStatus(id, status);\n      res.json(updatedRequest);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid status value\", errors: error.errors });\n      }\n      if (error instanceof Error && error.message.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Nanny application routes\n  app.post(\"/api/nanny-applications\", async (req, res) => {\n    try {\n      const data = insertNannyApplicationSchema.parse(req.body);\n      const application = await storage.createNannyApplication(data);\n      \n      // Create notification for new nanny application\n      await storage.createNotification({\n        type: \"nouvelle_candidature\",\n        titre: \"Nouvelle candidature nounou\",\n        message: `${application.nom} a postulé pour ${application.typePoste}`,\n        relatedId: application.id\n      });\n\n      // Check for potential matches with pending parent requests\n      const requests = await storage.getParentRequests();\n      const pendingRequests = requests.filter(r => r.statut === \"en_attente\");\n      \n      for (const request of pendingRequests) {\n        const matchScore = calculateMatchScore(request, application);\n        \n        if (matchScore.score >= 50) {\n          await storage.createNotification({\n            type: \"nouveau_match\",\n            titre: \"Nouveau match trouvé!\",\n            message: `Match de ${matchScore.score}% entre ${request.nom} et ${application.nom}`,\n            relatedId: application.id\n          });\n          break; // Only notify for the best match\n        }\n      }\n      \n      res.json(application);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    }\n  });\n\n  app.get(\"/api/nanny-applications\", async (req, res) => {\n    try {\n      const applications = await storage.getNannyApplications();\n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/nanny-applications/:id/status\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = updateNannyApplicationStatusSchema.parse(req.body);\n      \n      const updatedApplication = await storage.updateNannyApplicationStatus(id, status);\n      res.json(updatedApplication);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid status value\", errors: error.errors });\n      }\n      if (error instanceof Error && error.message.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/nanny-applications/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteNannyApplication(id);\n      res.json({ message: \"Candidature supprimée avec succès\" });\n    } catch (error) {\n      if (error instanceof Error && error.message.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  // Contact message routes\n  app.post(\"/api/contact-messages\", async (req, res) => {\n    try {\n      const data = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(data);\n      \n      // Create notification for new contact message\n      await storage.createNotification({\n        type: \"nouveau_message\",\n        titre: \"Nouveau message de contact\",\n        message: `${message.nom} a envoyé un message`,\n        relatedId: message.id\n      });\n      \n      res.json(message);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    }\n  });\n\n  app.get(\"/api/contact-messages\", async (req, res) => {\n    try {\n      const messages = await storage.getContactMessages();\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Notification routes (protected)\n  app.post(\"/api/notifications\", isAuthenticated, async (req, res) => {\n    try {\n      const data = insertNotificationSchema.parse(req.body);\n      const notification = await storage.createNotification(data);\n      res.json(notification);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Internal server error\" });\n      }\n    }\n  });\n\n  app.get(\"/api/notifications\", isAuthenticated, async (req, res) => {\n    try {\n      const notifications = await storage.getNotifications();\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/notifications/unread\", isAuthenticated, async (req, res) => {\n    try {\n      const notifications = await storage.getUnreadNotifications();\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/mark-read\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const notification = await storage.markNotificationAsRead(id);\n      res.json(notification);\n    } catch (error) {\n      if (error instanceof Error && error.message.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/notifications/mark-all-read\", isAuthenticated, async (req, res) => {\n    try {\n      await storage.markAllNotificationsAsRead();\n      res.json({ message: \"Toutes les notifications ont été marquées comme lues\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Matching routes (protected)\n  app.get(\"/api/matches\", isAuthenticated, async (req, res) => {\n    try {\n      const minScore = req.query.minScore ? parseInt(req.query.minScore as string) : 30;\n      const requests = await storage.getParentRequests();\n      const nannies = await storage.getNannyApplications();\n      \n      const matches = findBestMatches(requests, nannies, minScore);\n      res.json(matches);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/matches/request/:requestId\", isAuthenticated, async (req, res) => {\n    try {\n      const { requestId } = req.params;\n      const requests = await storage.getParentRequests();\n      const nannies = await storage.getNannyApplications();\n      \n      const request = requests.find(r => r.id === requestId);\n      if (!request) {\n        return res.status(404).json({ message: \"Parent request not found\" });\n      }\n      \n      const bestMatch = getBestMatchForRequest(request, nannies);\n      if (!bestMatch) {\n        return res.json({ message: \"No suitable match found\" });\n      }\n      \n      res.json(bestMatch);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Prestations routes\n  app.post(\"/api/prestations\", isAuthenticated, async (req, res) => {\n    try {\n      const data = insertPrestationSchema.parse(req.body);\n      const prestation = await storage.createPrestation(data);\n      res.json(prestation);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Données invalides\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Erreur serveur\" });\n      }\n    }\n  });\n\n  app.get(\"/api/prestations\", async (req, res) => {\n    try {\n      const prestations = await storage.getPrestations();\n      res.json(prestations);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  app.get(\"/api/prestations/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const prestation = await storage.getPrestationById(id);\n      if (!prestation) {\n        return res.status(404).json({ message: \"Prestation non trouvée\" });\n      }\n      res.json(prestation);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  app.patch(\"/api/prestations/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const data = req.body;\n      const prestation = await storage.updatePrestation(id, data);\n      res.json(prestation);\n    } catch (error) {\n      if (error instanceof Error && error.message.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  app.delete(\"/api/prestations/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deletePrestation(id);\n      res.json({ message: \"Prestation supprimée avec succès\" });\n    } catch (error) {\n      if (error instanceof Error && error.message.includes(\"not found\")) {\n        return res.status(404).json({ message: \"Prestation non trouvée\" });\n      }\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  // Paramètres site routes\n  app.post(\"/api/parametres-site\", isAuthenticated, async (req, res) => {\n    try {\n      const data = insertParametreSiteSchema.parse(req.body);\n      const parametre = await storage.createParametreSite(data);\n      res.json(parametre);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Données invalides\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Erreur serveur\" });\n      }\n    }\n  });\n\n  app.get(\"/api/parametres-site\", async (req, res) => {\n    try {\n      const parametres = await storage.getParametresSite();\n      res.json(parametres);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  app.get(\"/api/parametres-site/:cle\", async (req, res) => {\n    try {\n      const { cle } = req.params;\n      const parametre = await storage.getParametreSiteByCle(cle);\n      if (!parametre) {\n        return res.status(404).json({ message: \"Paramètre non trouvé\" });\n      }\n      res.json(parametre);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  app.patch(\"/api/parametres-site/:cle\", isAuthenticated, async (req, res) => {\n    try {\n      const { cle } = req.params;\n      const { valeur } = req.body;\n      if (!valeur) {\n        return res.status(400).json({ message: \"Valeur requise\" });\n      }\n      const parametre = await storage.updateParametreSite(cle, valeur);\n      res.json(parametre);\n    } catch (error) {\n      if (error instanceof Error && error.message.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  app.delete(\"/api/parametres-site/:cle\", isAuthenticated, async (req, res) => {\n    try {\n      const { cle } = req.params;\n      await storage.deleteParametreSite(cle);\n      res.json({ message: \"Paramètre supprimé avec succès\" });\n    } catch (error) {\n      if (error instanceof Error && error.message.includes(\"not found\")) {\n        return res.status(404).json({ message: \"Paramètre non trouvé\" });\n      }\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  // Employees routes\n  app.post(\"/api/employees\", isAuthenticated, async (req, res) => {\n    try {\n      const { candidatureId } = req.body;\n      if (!candidatureId) {\n        return res.status(400).json({ message: \"ID de candidature requis\" });\n      }\n\n      // Récupérer la candidature\n      const candidature = await storage.getNannyApplicationById(candidatureId);\n      if (!candidature) {\n        return res.status(404).json({ message: \"Candidature non trouvée\" });\n      }\n\n      // Créer l'employé à partir de la candidature\n      const employeeData = insertEmployeeSchema.parse({\n        candidatureId: candidature.id,\n        nom: candidature.nom,\n        telephone: candidature.telephone,\n        adresse: candidature.adresse,\n        typePoste: candidature.typePoste,\n        experience: candidature.experience,\n        disponibilites: candidature.disponibilites,\n        documents: candidature.documents,\n        actif: true,\n        dateEmbauche: new Date()\n      });\n\n      const employee = await storage.createEmployee(employeeData);\n      res.json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Données invalides\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Erreur serveur\" });\n      }\n    }\n  });\n\n  app.get(\"/api/employees\", isAuthenticated, async (req, res) => {\n    try {\n      const employees = await storage.getEmployees();\n      res.json(employees);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  app.get(\"/api/employees/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const employee = await storage.getEmployeeById(id);\n      if (!employee) {\n        return res.status(404).json({ message: \"Employé non trouvé\" });\n      }\n      res.json(employee);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  app.patch(\"/api/employees/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const data = req.body;\n      const employee = await storage.updateEmployee(id, data);\n      res.json(employee);\n    } catch (error) {\n      if (error instanceof Error && error.message.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  app.delete(\"/api/employees/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteEmployee(id);\n      res.json({ message: \"Employé supprimé avec succès\" });\n    } catch (error) {\n      if (error instanceof Error && error.message.includes(\"not found\")) {\n        return res.status(404).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  // Paiements employés routes\n  app.post(\"/api/paiements-employes\", isAuthenticated, async (req, res) => {\n    try {\n      const data = insertPaiementEmployeSchema.parse(req.body);\n      const paiement = await storage.createPaiementEmploye(data);\n      res.json(paiement);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Données invalides\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Erreur serveur\" });\n      }\n    }\n  });\n\n  app.get(\"/api/paiements-employes/employee/:employeeId\", isAuthenticated, async (req, res) => {\n    try {\n      const { employeeId } = req.params;\n      const paiements = await storage.getPaiementsEmploye(employeeId);\n      res.json(paiements);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  app.get(\"/api/paiements-employes\", isAuthenticated, async (req, res) => {\n    try {\n      const paiements = await storage.getAllPaiementsEmployes();\n      res.json(paiements);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  // Payment configurations routes\n  app.get(\"/api/payment-configs\", isAuthenticated, async (req, res) => {\n    try {\n      const configs = await storage.getPaymentConfigs();\n      res.json(configs);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  app.get(\"/api/payment-configs/:provider\", isAuthenticated, async (req, res) => {\n    try {\n      const { provider } = req.params;\n      const config = await storage.getPaymentConfigByProvider(provider);\n      if (!config) {\n        return res.status(404).json({ message: \"Configuration non trouvée\" });\n      }\n      res.json(config);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur serveur\" });\n    }\n  });\n\n  app.put(\"/api/payment-configs/:provider\", isAuthenticated, async (req, res) => {\n    try {\n      const { provider } = req.params;\n      const data = updatePaymentConfigSchema.parse(req.body);\n      const config = await storage.upsertPaymentConfig(provider, data);\n      res.json(config);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Données invalides\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Erreur serveur\" });\n      }\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":35825},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"server/scripts/init-admin.ts":{"content":"import { neon } from \"@neondatabase/serverless\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { adminUsers } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nconst initDb = () => {\n  const databaseUrl = process.env.DATABASE_URL;\n  if (!databaseUrl) {\n    throw new Error(\"DATABASE_URL environment variable is not defined\");\n  }\n  const sql = neon(databaseUrl);\n  return drizzle(sql);\n};\n\nconst db = initDb();\n\nasync function initAdmin() {\n  try {\n    // Check if admin already exists\n    const existingAdmin = await db.select().from(adminUsers).limit(1);\n    \n    if (existingAdmin.length > 0) {\n      console.log(\"Admin user already exists\");\n      return;\n    }\n\n    // Create default admin user\n    const passwordHash = await bcrypt.hash(\"admin123\", 10);\n    \n    const [admin] = await db.insert(adminUsers).values({\n      username: \"admin\",\n      passwordHash,\n      nom: \"Administrateur\",\n      email: \"admin@gardedesenfantsgabon.com\",\n      role: \"admin\"\n    }).returning();\n\n    console.log(\"✅ Admin user created successfully\");\n    console.log(\"Username: admin\");\n    console.log(\"Password: admin123\");\n    console.log(\"⚠️  Please change the password after first login\");\n  } catch (error) {\n    console.error(\"Error creating admin user:\", error);\n    process.exit(1);\n  }\n}\n\ninitAdmin();\n","size_bytes":1320},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const url = queryKey\n      .filter((segment) => typeof segment === 'string' || typeof segment === 'number')\n      .join('/');\n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1488},"client/src/pages/admin.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation, Link } from \"wouter\";\nimport { \n  LogOut, \n  Users, \n  Baby, \n  MessageSquare, \n  Calendar,\n  Phone,\n  MapPin,\n  FileText,\n  ChevronDown,\n  ChevronUp,\n  Bell,\n  Check,\n  Heart,\n  UserCog,\n  Eye,\n  Download,\n  Settings,\n  Trash2,\n  CreditCard\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\nimport type { \n  ParentRequest, \n  NannyApplication, \n  ContactMessage,\n  ParentRequestStatus,\n  NannyApplicationStatus,\n  Notification,\n  Employee\n} from \"@shared/schema\";\n\nfunction NotificationCenter({ \n  notifications, \n  onMarkAsRead, \n  onMarkAllAsRead,\n  isPending \n}: { \n  notifications: Notification[]; \n  onMarkAsRead: (id: string) => void;\n  onMarkAllAsRead: () => void;\n  isPending: boolean;\n}) {\n  const unreadCount = notifications.length;\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"nouvelle_demande\":\n        return <Baby className=\"w-4 h-4\" />;\n      case \"nouvelle_candidature\":\n        return <Users className=\"w-4 h-4\" />;\n      case \"nouveau_message\":\n        return <MessageSquare className=\"w-4 h-4\" />;\n      case \"nouveau_match\":\n        return <Check className=\"w-4 h-4\" />;\n      default:\n        return <Bell className=\"w-4 h-4\" />;\n    }\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"\";\n    const d = new Date(date);\n    const now = new Date();\n    const diff = now.getTime() - d.getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n\n    if (minutes < 1) return \"À l'instant\";\n    if (minutes < 60) return `Il y a ${minutes} min`;\n    if (hours < 24) return `Il y a ${hours}h`;\n    return `Il y a ${days}j`;\n  };\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"relative\"\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"w-4 h-4\" />\n          {unreadCount > 0 && (\n            <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\">\n              {unreadCount > 9 ? '9+' : unreadCount}\n            </span>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80\" align=\"end\">\n        <div className=\"flex justify-between items-center mb-3\">\n          <h3 className=\"font-semibold text-sm\">Notifications</h3>\n          {unreadCount > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onMarkAllAsRead}\n              disabled={isPending}\n              data-testid=\"button-mark-all-read\"\n              className=\"text-xs h-7\"\n            >\n              Tout marquer comme lu\n            </Button>\n          )}\n        </div>\n        \n        {notifications.length === 0 ? (\n          <p className=\"text-sm text-muted-foreground text-center py-4\">\n            Aucune nouvelle notification\n          </p>\n        ) : (\n          <ScrollArea className=\"h-80\">\n            <div className=\"space-y-2\">\n              {notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  className=\"flex items-start gap-3 p-3 hover:bg-accent rounded-lg cursor-pointer transition-colors\"\n                  onClick={() => onMarkAsRead(notification.id)}\n                  data-testid={`notification-${notification.id}`}\n                >\n                  <div className=\"mt-1 text-primary\">\n                    {getNotificationIcon(notification.type)}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium\">{notification.titre}</p>\n                    <p className=\"text-xs text-muted-foreground mt-1 truncate\">\n                      {notification.message}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {formatDate(notification.dateCreation)}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </ScrollArea>\n        )}\n      </PopoverContent>\n    </Popover>\n  );\n}\n\ninterface DocumentInfo {\n  filename: string;\n  data?: string; // Optional: old documents have base64 data\n  storedPath: string; // Path in Object Storage\n  type: string;\n  size: number;\n}\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [expandedRequests, setExpandedRequests] = useState<Set<string>>(new Set());\n  const [expandedApplications, setExpandedApplications] = useState<Set<string>>(new Set());\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\n  const [employeeDialogOpen, setEmployeeDialogOpen] = useState(false);\n  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);\n  const [paymentFormData, setPaymentFormData] = useState({\n    montant: \"\",\n    motif: \"\",\n    datePaiement: new Date().toISOString().split('T')[0],\n  });\n  const [deleteEmployeeDialogOpen, setDeleteEmployeeDialogOpen] = useState(false);\n  const [deleteApplicationId, setDeleteApplicationId] = useState<string | null>(null);\n\n  const parseDocuments = (documentsJson: string | null): DocumentInfo[] => {\n    if (!documentsJson) return [];\n    try {\n      const docs = JSON.parse(documentsJson);\n      // Ensure all documents have storedPath (always prefix legacy ones)\n      return docs.map((doc: any) => ({\n        ...doc,\n        // If no storedPath or if it's a legacy doc (has base64 data), prefix with \"legacy-\"\n        storedPath: doc.storedPath || `legacy-${doc.filename || Date.now()}`\n      }));\n    } catch {\n      return [];\n    }\n  };\n\n  const viewDocument = (doc: DocumentInfo) => {\n    // If doc has base64 data (old format), use it\n    if (doc.data) {\n      const dataUrl = `data:${doc.type};base64,${doc.data}`;\n      window.open(dataUrl, '_blank');\n    } else if (doc.storedPath && !doc.storedPath.startsWith('legacy-')) {\n      // New format: fetch from Object Storage (only if valid path)\n      window.open(`/api/download/${doc.storedPath}`, '_blank');\n    } else {\n      // Neither data nor valid storedPath - show error\n      toast({\n        title: \"Document indisponible\",\n        description: \"Ce document ne peut pas être visualisé (format legacy incompatible)\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const downloadDocument = (doc: DocumentInfo) => {\n    // If doc has base64 data (old format), use it\n    if (doc.data) {\n      const dataUrl = `data:${doc.type};base64,${doc.data}`;\n      const link = document.createElement('a');\n      link.href = dataUrl;\n      link.download = doc.filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } else if (doc.storedPath && !doc.storedPath.startsWith('legacy-')) {\n      // New format: download from Object Storage (only if valid path)\n      const link = document.createElement('a');\n      link.href = `/api/download/${doc.storedPath}`;\n      link.download = doc.filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } else {\n      // Neither data nor valid storedPath - show error\n      toast({\n        title: \"Document indisponible\",\n        description: \"Ce document ne peut pas être téléchargé (format legacy incompatible)\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const { data: user, isLoading: userLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  const { data: parentRequests = [], isLoading: requestsLoading } = useQuery<ParentRequest[]>({\n    queryKey: [\"/api/parent-requests\"],\n  });\n\n  const { data: nannyApplications = [], isLoading: applicationsLoading } = useQuery<NannyApplication[]>({\n    queryKey: [\"/api/nanny-applications\"],\n  });\n\n  const { data: contactMessages = [], isLoading: messagesLoading } = useQuery<ContactMessage[]>({\n    queryKey: [\"/api/contact-messages\"],\n  });\n\n  const { data: unreadNotifications = [], isLoading: notificationsLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications/unread\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const { data: employees = [], isLoading: employeesLoading } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  });\n\n  // Fetch employee's related application when selected\n  const { data: employeeApplication } = useQuery<NannyApplication | null>({\n    queryKey: [\"/api/nanny-applications\", selectedEmployee?.candidatureId],\n    enabled: !!selectedEmployee?.candidatureId,\n  });\n\n  // Fetch employee's payment history when selected\n  const { data: employeePayments = [] } = useQuery<any[]>({\n    queryKey: [\"/api/paiements-employes/employee\", selectedEmployee?.id],\n    enabled: !!selectedEmployee?.id,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/logout\", {});\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Déconnexion réussie\",\n        description: \"À bientôt !\",\n      });\n      setLocation(\"/admin/login\");\n    },\n  });\n\n  const updateParentRequestStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: ParentRequestStatus }) => {\n      const response = await apiRequest(\"PATCH\", `/api/parent-requests/${id}/status`, { status });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur lors de la mise à jour\");\n      }\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/parent-requests\"] });\n      toast({\n        title: \"Statut mis à jour\",\n        description: \"Le statut de la demande a été modifié avec succès\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: error.message || \"Impossible de mettre à jour le statut\",\n      });\n    },\n  });\n\n  const updateNannyApplicationStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: NannyApplicationStatus }) => {\n      const response = await apiRequest(\"PATCH\", `/api/nanny-applications/${id}/status`, { status });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur lors de la mise à jour\");\n      }\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/nanny-applications\"] });\n      toast({\n        title: \"Statut mis à jour\",\n        description: \"Le statut de la candidature a été modifié avec succès\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: error.message || \"Impossible de mettre à jour le statut\",\n      });\n    },\n  });\n\n  const markNotificationAsReadMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"PATCH\", `/api/notifications/${id}/mark-read`, {});\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread\"] });\n    },\n  });\n\n  const markAllNotificationsAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/notifications/mark-all-read\", {});\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications/unread\"] });\n      toast({\n        title: \"Notifications marquées comme lues\",\n        description: \"Toutes les notifications ont été marquées comme lues\",\n      });\n    },\n  });\n\n  const addPaymentMutation = useMutation({\n    mutationFn: async (data: { employeId: string; montant: number; motif: string; datePaiement: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/paiements-employes\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/paiements-employes/employee\", selectedEmployee?.id] });\n      toast({ title: \"Paiement ajouté avec succès\" });\n      setPaymentDialogOpen(false);\n    },\n    onError: () => {\n      toast({ title: \"Erreur lors de l'ajout du paiement\", variant: \"destructive\" });\n    },\n  });\n\n  const acceptApplicationMutation = useMutation({\n    mutationFn: async (application: NannyApplication) => {\n      // Créer l'employé (apiRequest throws if not ok)\n      await apiRequest(\"POST\", \"/api/employees\", {\n        candidatureId: application.id,\n        nom: application.nom,\n        telephone: application.telephone,\n        adresse: application.adresse,\n        typePoste: application.typePoste,\n        experience: application.experience,\n        disponibilites: application.disponibilites,\n        documents: application.documents,\n      });\n      \n      // Mettre à jour le statut (apiRequest throws if not ok)\n      await apiRequest(\"PATCH\", `/api/nanny-applications/${application.id}/status`, {\n        status: \"accepte\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/nanny-applications\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      toast({\n        title: \"Candidature acceptée\",\n        description: \"L'employé a été créé avec succès\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible d'accepter la candidature\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectApplicationMutation = useMutation({\n    mutationFn: async (applicationId: string) => {\n      // apiRequest throws if not ok\n      await apiRequest(\"PATCH\", `/api/nanny-applications/${applicationId}/status`, {\n        status: \"refuse\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/nanny-applications\"] });\n      toast({\n        title: \"Candidature refusée\",\n        description: \"Le statut a été mis à jour\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de refuser la candidature\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (employeeId: string) => {\n      await apiRequest(\"DELETE\", `/api/employees/${employeeId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      toast({\n        title: \"Employé supprimé\",\n        description: \"L'employé a été retiré avec succès\",\n      });\n      setEmployeeDialogOpen(false);\n      setSelectedEmployee(null);\n      setDeleteEmployeeDialogOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de supprimer l'employé\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteApplicationMutation = useMutation({\n    mutationFn: async (applicationId: string) => {\n      await apiRequest(\"DELETE\", `/api/nanny-applications/${applicationId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/nanny-applications\"] });\n      toast({\n        title: \"Candidature supprimée\",\n        description: \"La candidature a été retirée avec succès\",\n      });\n      setDeleteApplicationId(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de supprimer la candidature\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!userLoading && !user) {\n      setLocation(\"/admin/login\");\n    }\n  }, [user, userLoading, setLocation]);\n\n  if (userLoading) {\n    return (\n      <div className=\"mobile-container min-h-screen bg-background flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Chargement...</p>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const toggleRequestExpand = (id: string) => {\n    const newExpanded = new Set(expandedRequests);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedRequests(newExpanded);\n  };\n\n  const toggleApplicationExpand = (id: string) => {\n    const newExpanded = new Set(expandedApplications);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedApplications(newExpanded);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      en_attente: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\",\n      traite: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\",\n      paye: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n    };\n    \n    const labels = {\n      en_attente: \"En attente\",\n      traite: \"Traité\",\n      paye: \"Payé\",\n    };\n\n    return (\n      <Badge className={variants[status as keyof typeof variants] || \"\"}>\n        {labels[status as keyof typeof labels] || status}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-background pb-20\">\n      <div className=\"p-4 sm:p-6 w-full\">\n        <div className=\"flex flex-col gap-4 mb-6 sm:flex-row sm:justify-between sm:items-center\">\n          <div>\n            <h1 className=\"text-2xl font-heading font-bold text-primary\">\n              Administration\n            </h1>\n            <p className=\"text-sm text-muted-foreground\">\n              Bienvenue, {(user as any)?.username || 'Administrateur'}\n            </p>\n          </div>\n          <div className=\"flex flex-row items-center gap-2 flex-wrap\">\n            <NotificationCenter\n              notifications={unreadNotifications}\n              onMarkAsRead={(id) => markNotificationAsReadMutation.mutate(id)}\n              onMarkAllAsRead={() => markAllNotificationsAsReadMutation.mutate()}\n              isPending={markNotificationAsReadMutation.isPending || markAllNotificationsAsReadMutation.isPending}\n            />\n            <Link href=\"/admin/profile\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-profile\"\n              >\n                <UserCog className=\"w-4 h-4 mr-2\" />\n                Profil\n              </Button>\n            </Link>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => logoutMutation.mutate()}\n              disabled={logoutMutation.isPending}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Déconnexion\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                <Baby className=\"w-4 h-4 text-primary\" />\n                Demandes Parents\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-parent-requests\">\n                {requestsLoading ? \"...\" : parentRequests.length}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                <Users className=\"w-4 h-4 text-primary\" />\n                Candidatures Nounous\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-nanny-applications\">\n                {applicationsLoading ? \"...\" : nannyApplications.length}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                <MessageSquare className=\"w-4 h-4 text-primary\" />\n                Messages Contact\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-contact-messages\">\n                {messagesLoading ? \"...\" : contactMessages.length}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n          <Button\n            onClick={() => setLocation(\"/admin/prestations\")}\n            size=\"lg\"\n            variant=\"outline\"\n            className=\"w-full\"\n            data-testid=\"button-prestations\"\n          >\n            <FileText className=\"w-5 h-5 mr-2\" />\n            Prestations\n          </Button>\n          <Button\n            onClick={() => setLocation(\"/admin/parametres\")}\n            size=\"lg\"\n            variant=\"outline\"\n            className=\"w-full\"\n            data-testid=\"button-parametres\"\n          >\n            <Settings className=\"w-5 h-5 mr-2\" />\n            Paramètres\n          </Button>\n          <Button\n            onClick={() => setLocation(\"/admin/payment-config\")}\n            size=\"lg\"\n            variant=\"outline\"\n            className=\"w-full\"\n            data-testid=\"button-payment-config\"\n          >\n            <CreditCard className=\"w-5 h-5 mr-2\" />\n            Moyens de paiement\n          </Button>\n          <Button\n            onClick={() => setLocation(\"/admin/matching\")}\n            size=\"lg\"\n            data-testid=\"button-matching\"\n          >\n            <Heart className=\"w-5 h-5 mr-2\" />\n            Matching\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"parents\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 gap-1\">\n            <TabsTrigger value=\"parents\" data-testid=\"tab-parents\" className=\"px-2 text-xs sm:text-sm truncate\">\n              <span className=\"truncate\">Demandes Parents</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"nannies\" data-testid=\"tab-nannies\" className=\"px-2 text-xs sm:text-sm truncate\">\n              <span className=\"truncate\">Candidatures</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"employees\" data-testid=\"tab-employees\" className=\"px-2 text-xs sm:text-sm truncate\">\n              <span className=\"truncate\">Employés</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"messages\" data-testid=\"tab-messages\" className=\"px-2 text-xs sm:text-sm truncate\">\n              <span className=\"truncate\">Messages</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"parents\" className=\"space-y-4 mt-4\">\n            {requestsLoading ? (\n              <p className=\"text-center text-muted-foreground\">Chargement...</p>\n            ) : parentRequests.length === 0 ? (\n              <p className=\"text-center text-muted-foreground\">Aucune demande pour le moment</p>\n            ) : (\n              parentRequests.map((request) => (\n                <Collapsible key={request.id} open={expandedRequests.has(request.id)}>\n                  <Card>\n                    <CollapsibleTrigger asChild>\n                      <CardHeader \n                        className=\"cursor-pointer hover:bg-accent/50 transition-colors\"\n                        onClick={() => toggleRequestExpand(request.id)}\n                        data-testid={`request-card-${request.id}`}\n                      >\n                        <div className=\"flex items-start justify-between gap-3\">\n                          <div className=\"flex-1 min-w-0\">\n                            <CardTitle className=\"text-base font-medium\">\n                              {request.nom}\n                            </CardTitle>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              {request.typeService} - {request.forfait}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center gap-2 flex-shrink-0\">\n                            <Select\n                              value={request.statut || 'en_attente'}\n                              onValueChange={(value) => {\n                                updateParentRequestStatusMutation.mutate({ \n                                  id: request.id, \n                                  status: value as ParentRequestStatus\n                                });\n                              }}\n                              disabled={updateParentRequestStatusMutation.isPending}\n                            >\n                              <SelectTrigger \n                                className=\"w-32 h-8 text-xs\"\n                                data-testid={`select-status-${request.id}`}\n                                onClick={(e) => e.stopPropagation()}\n                              >\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"en_attente\">En attente</SelectItem>\n                                <SelectItem value=\"traite\">Traité</SelectItem>\n                                <SelectItem value=\"paye\">Payé</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            {expandedRequests.has(request.id) ? (\n                              <ChevronUp className=\"w-5 h-5 text-muted-foreground\" />\n                            ) : (\n                              <ChevronDown className=\"w-5 h-5 text-muted-foreground\" />\n                            )}\n                          </div>\n                        </div>\n                      </CardHeader>\n                    </CollapsibleTrigger>\n                    <CollapsibleContent>\n                      <CardContent className=\"pt-0 space-y-3\">\n                        <div className=\"grid grid-cols-1 gap-3 text-sm\">\n                          <div className=\"flex items-start gap-2\">\n                            <Phone className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                            <span>{request.telephone}</span>\n                          </div>\n                          <div className=\"flex items-start gap-2\">\n                            <MapPin className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                            <span>{request.adresse}</span>\n                          </div>\n                          <div className=\"flex items-start gap-2\">\n                            <Baby className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                            <div>\n                              <p className=\"font-medium\">Enfants:</p>\n                              <p className=\"text-muted-foreground\">{request.nombreEnfants} enfant(s)</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-start gap-2\">\n                            <Calendar className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                            <span>\n                              {request.horaireDebut && request.horaireFin \n                                ? `${request.horaireDebut} - ${request.horaireFin}`\n                                : 'Horaires non spécifiés'\n                              }\n                            </span>\n                          </div>\n                          {request.commentaires && (\n                            <div className=\"flex items-start gap-2\">\n                              <FileText className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                              <div>\n                                <p className=\"font-medium\">Notes:</p>\n                                <p className=\"text-muted-foreground\">{request.commentaires}</p>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </CardContent>\n                    </CollapsibleContent>\n                  </Card>\n                </Collapsible>\n              ))\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"nannies\" className=\"space-y-4 mt-4\">\n            {applicationsLoading ? (\n              <p className=\"text-center text-muted-foreground\">Chargement...</p>\n            ) : nannyApplications.length === 0 ? (\n              <p className=\"text-center text-muted-foreground\">Aucune candidature pour le moment</p>\n            ) : (\n              nannyApplications.map((application) => (\n                <Collapsible key={application.id} open={expandedApplications.has(application.id)}>\n                  <Card>\n                    <CollapsibleTrigger asChild>\n                      <CardHeader \n                        className=\"cursor-pointer hover:bg-accent/50 transition-colors\"\n                        onClick={() => toggleApplicationExpand(application.id)}\n                        data-testid={`application-card-${application.id}`}\n                      >\n                        <div className=\"flex items-start justify-between gap-3\">\n                          <div className=\"flex-1 min-w-0\">\n                            <CardTitle className=\"text-base font-medium\">\n                              {application.nom}\n                            </CardTitle>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              {application.typePoste} - {application.experience}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center gap-2 flex-shrink-0\">\n                            {application.statut === 'accepte' || application.statut === 'refuse' ? (\n                              <span \n                                className={`px-3 py-1 text-xs font-medium rounded-md ${\n                                  application.statut === 'accepte' \n                                    ? 'bg-green-100 text-green-700' \n                                    : 'bg-red-100 text-red-700'\n                                }`}\n                                data-testid={`status-badge-${application.id}`}\n                              >\n                                {application.statut === 'accepte' ? 'Accepté' : 'Refusé'}\n                              </span>\n                            ) : (\n                              <Select\n                                value={application.statut || 'en_examen'}\n                                onValueChange={(value) => {\n                                  updateNannyApplicationStatusMutation.mutate({ \n                                    id: application.id, \n                                    status: value as NannyApplicationStatus\n                                  });\n                                }}\n                                disabled={updateNannyApplicationStatusMutation.isPending}\n                              >\n                                <SelectTrigger \n                                  className=\"w-32 h-8 text-xs\"\n                                  data-testid={`select-status-${application.id}`}\n                                  onClick={(e) => e.stopPropagation()}\n                                >\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"en_examen\">En examen</SelectItem>\n                                  <SelectItem value=\"en_attente\">En attente</SelectItem>\n                                  <SelectItem value=\"traite\">Traité</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            )}\n                            {expandedApplications.has(application.id) ? (\n                              <ChevronUp className=\"w-5 h-5 text-muted-foreground\" />\n                            ) : (\n                              <ChevronDown className=\"w-5 h-5 text-muted-foreground\" />\n                            )}\n                          </div>\n                        </div>\n                      </CardHeader>\n                    </CollapsibleTrigger>\n                    <CollapsibleContent>\n                      <CardContent className=\"pt-0 space-y-3\">\n                        <div className=\"grid grid-cols-1 gap-3 text-sm\">\n                          <div className=\"flex items-start gap-2\">\n                            <Phone className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                            <span>{application.telephone}</span>\n                          </div>\n                          <div className=\"flex items-start gap-2\">\n                            <MapPin className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                            <span>{application.adresse}</span>\n                          </div>\n                          {application.disponibilites && (\n                            <div className=\"flex items-start gap-2\">\n                              <Calendar className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                              <div>\n                                <p className=\"font-medium\">Disponibilités:</p>\n                                <p className=\"text-muted-foreground\">{application.disponibilites}</p>\n                              </div>\n                            </div>\n                          )}\n                          {application.documents && (() => {\n                            const docs = parseDocuments(application.documents);\n                            if (docs.length === 0) return null;\n                            \n                            return (\n                              <div className=\"flex items-start gap-2\">\n                                <FileText className=\"w-4 h-4 text-muted-foreground mt-0.5 shrink-0\" />\n                                <div className=\"min-w-0 flex-1\">\n                                  <p className=\"font-medium mb-2\">Documents:</p>\n                                  <div className=\"space-y-2\">\n                                    {docs.map((doc, idx) => (\n                                      <div \n                                        key={idx} \n                                        className=\"flex items-center gap-2 p-2 bg-accent/10 rounded-md\"\n                                        data-testid={`document-${application.id}-${idx}`}\n                                      >\n                                        <FileText className=\"w-3 h-3 text-muted-foreground shrink-0\" />\n                                        <span className=\"text-xs flex-1 min-w-0 truncate\" title={doc.filename}>\n                                          {doc.filename}\n                                        </span>\n                                        <div className=\"flex gap-1 shrink-0\">\n                                          <Button\n                                            variant=\"ghost\"\n                                            size=\"sm\"\n                                            className=\"h-7 px-2\"\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n                                              viewDocument(doc);\n                                            }}\n                                            data-testid={`button-view-${application.id}-${idx}`}\n                                          >\n                                            <Eye className=\"w-3 h-3\" />\n                                          </Button>\n                                          <Button\n                                            variant=\"ghost\"\n                                            size=\"sm\"\n                                            className=\"h-7 px-2\"\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n                                              downloadDocument(doc);\n                                            }}\n                                            data-testid={`button-download-${application.id}-${idx}`}\n                                          >\n                                            <Download className=\"w-3 h-3\" />\n                                          </Button>\n                                        </div>\n                                      </div>\n                                    ))}\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          })()}\n                        </div>\n\n                        {/* Accept/Reject Buttons (only show if status is \"traite\") */}\n                        {application.statut === \"traite\" && (\n                          <div className=\"flex gap-2 mt-4 pt-4 border-t\">\n                            <Button\n                              variant=\"default\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                acceptApplicationMutation.mutate(application);\n                              }}\n                              disabled={acceptApplicationMutation.isPending || rejectApplicationMutation.isPending}\n                              className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                              data-testid={`button-accept-${application.id}`}\n                            >\n                              {acceptApplicationMutation.isPending ? \"Traitement...\" : \"Accepter\"}\n                            </Button>\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                rejectApplicationMutation.mutate(application.id);\n                              }}\n                              disabled={acceptApplicationMutation.isPending || rejectApplicationMutation.isPending}\n                              className=\"flex-1\"\n                              data-testid={`button-reject-${application.id}`}\n                            >\n                              {rejectApplicationMutation.isPending ? \"Traitement...\" : \"Refuser\"}\n                            </Button>\n                          </div>\n                        )}\n\n                        {/* Delete Button (only show for accepted or refused applications) */}\n                        {(application.statut === \"accepte\" || application.statut === \"refuse\") && (\n                          <div className=\"flex gap-2 mt-4 pt-4 border-t\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                setDeleteApplicationId(application.id);\n                              }}\n                              disabled={deleteApplicationMutation.isPending}\n                              className=\"w-full text-destructive hover:bg-destructive/10\"\n                              data-testid={`button-delete-application-${application.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4 mr-2\" />\n                              Supprimer la candidature\n                            </Button>\n                          </div>\n                        )}\n                      </CardContent>\n                    </CollapsibleContent>\n                  </Card>\n                </Collapsible>\n              ))\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"employees\" className=\"space-y-4 mt-4\">\n            {employeesLoading ? (\n              <p className=\"text-center text-muted-foreground\">Chargement...</p>\n            ) : employees.length === 0 ? (\n              <p className=\"text-center text-muted-foreground\">Aucun employé pour le moment</p>\n            ) : (\n              employees.map((employee) => (\n                <Card key={employee.id} data-testid={`employee-card-${employee.id}`}>\n                  <CardHeader>\n                    <CardTitle className=\"text-base font-medium flex items-center justify-between\">\n                      <span>{employee.nom}</span>\n                      <Badge variant=\"outline\">{employee.typePoste}</Badge>\n                    </CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {employee.telephone} • {employee.adresse}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Expérience: {employee.experience}\n                    </p>\n                  </CardHeader>\n                  <CardContent>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedEmployee(employee);\n                        setEmployeeDialogOpen(true);\n                      }}\n                      data-testid={`button-view-employee-${employee.id}`}\n                    >\n                      <UserCog className=\"w-4 h-4 mr-2\" />\n                      Voir le dossier\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"messages\" className=\"space-y-4 mt-4\">\n            {messagesLoading ? (\n              <p className=\"text-center text-muted-foreground\">Chargement...</p>\n            ) : contactMessages.length === 0 ? (\n              <p className=\"text-center text-muted-foreground\">Aucun message pour le moment</p>\n            ) : (\n              contactMessages.map((message) => (\n                <Card key={message.id} data-testid={`message-card-${message.id}`}>\n                  <CardHeader>\n                    <CardTitle className=\"text-base font-medium\">\n                      {message.nom}\n                    </CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {message.telephone}\n                    </p>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm\">{message.message}</p>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Employee Details Dialog */}\n      <Dialog open={employeeDialogOpen} onOpenChange={setEmployeeDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <div className=\"flex items-center justify-between\">\n              <DialogTitle className=\"text-2xl\">\n                Dossier Employé: {selectedEmployee?.nom}\n              </DialogTitle>\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={() => setDeleteEmployeeDialogOpen(true)}\n                data-testid=\"button-delete-employee\"\n              >\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Retirer l'employé\n              </Button>\n            </div>\n          </DialogHeader>\n\n          {selectedEmployee && (\n            <div className=\"space-y-6\">\n              {/* Employee Info */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Informations</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <p><strong>Nom:</strong> {selectedEmployee.nom}</p>\n                  <p><strong>Téléphone:</strong> {selectedEmployee.telephone}</p>\n                  <p><strong>Adresse:</strong> {selectedEmployee.adresse}</p>\n                  <p><strong>Type de poste:</strong> {selectedEmployee.typePoste}</p>\n                  <p><strong>Expérience:</strong> {selectedEmployee.experience}</p>\n                  <p><strong>Disponibilités:</strong> {selectedEmployee.disponibilites}</p>\n                </CardContent>\n              </Card>\n\n              {/* Documents Section */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Documents</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {selectedEmployee && (() => {\n                    const docs = parseDocuments(selectedEmployee.documents);\n                    return docs.length > 0 ? (\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                        {docs.map((doc, idx) => (\n                          <div\n                            key={idx}\n                            className=\"flex items-center gap-2 p-2 bg-accent/10 rounded-md\"\n                          >\n                            <FileText className=\"w-4 h-4 text-muted-foreground shrink-0\" />\n                            <span className=\"text-sm flex-1 min-w-0 truncate\" title={doc.filename}>\n                              {doc.filename}\n                            </span>\n                            <div className=\"flex gap-1 shrink-0\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"h-7 px-2\"\n                                onClick={() => viewDocument(doc)}\n                              >\n                                <Eye className=\"w-3 h-3\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"h-7 px-2\"\n                                onClick={() => downloadDocument(doc)}\n                              >\n                                <Download className=\"w-3 h-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-sm text-muted-foreground\">Aucun document disponible</p>\n                    );\n                  })()}\n                </CardContent>\n              </Card>\n\n              {/* Payments History */}\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle className=\"text-lg\">Historique des Paiements</CardTitle>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setPaymentFormData({\n                        montant: \"\",\n                        motif: \"\",\n                        datePaiement: new Date().toISOString().split('T')[0],\n                      });\n                      setPaymentDialogOpen(true);\n                    }}\n                    data-testid=\"button-add-payment\"\n                  >\n                    Ajouter Paiement\n                  </Button>\n                </CardHeader>\n                <CardContent>\n                  {employeePayments.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {employeePayments.map((payment: any) => (\n                        <div\n                          key={payment.id}\n                          className=\"flex items-center justify-between p-3 bg-accent/10 rounded-md\"\n                          data-testid={`payment-${payment.id}`}\n                        >\n                          <div>\n                            <p className=\"font-medium\">{payment.montant} FCFA</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Motif: {payment.motif} • {new Date(payment.datePaiement).toLocaleDateString('fr-FR')}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">\n                      Aucun paiement enregistré pour le moment\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Add Payment Dialog */}\n      <Dialog open={paymentDialogOpen} onOpenChange={setPaymentDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Ajouter un Paiement</DialogTitle>\n          </DialogHeader>\n          \n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              if (selectedEmployee) {\n                addPaymentMutation.mutate({\n                  employeId: selectedEmployee.id,\n                  montant: parseFloat(paymentFormData.montant),\n                  motif: paymentFormData.motif,\n                  datePaiement: paymentFormData.datePaiement,\n                });\n              }\n            }}\n            className=\"space-y-4\"\n          >\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"montant\">Montant (FCFA)</Label>\n              <Input\n                id=\"montant\"\n                type=\"number\"\n                value={paymentFormData.montant}\n                onChange={(e) => setPaymentFormData({ ...paymentFormData, montant: e.target.value })}\n                placeholder=\"50000\"\n                required\n                data-testid=\"input-montant\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"motif\">Motif</Label>\n              <Input\n                id=\"motif\"\n                type=\"text\"\n                value={paymentFormData.motif}\n                onChange={(e) => setPaymentFormData({ ...paymentFormData, motif: e.target.value })}\n                placeholder=\"Garde du 01/10 au 05/10\"\n                required\n                data-testid=\"input-motif\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"datePaiement\">Date de paiement</Label>\n              <Input\n                id=\"datePaiement\"\n                type=\"date\"\n                value={paymentFormData.datePaiement}\n                onChange={(e) => setPaymentFormData({ ...paymentFormData, datePaiement: e.target.value })}\n                required\n                data-testid=\"input-datePaiement\"\n              />\n            </div>\n\n            <div className=\"flex gap-2 justify-end\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setPaymentDialogOpen(false)}\n                data-testid=\"button-cancel-payment\"\n              >\n                Annuler\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={addPaymentMutation.isPending}\n                data-testid=\"button-submit-payment\"\n              >\n                {addPaymentMutation.isPending ? \"Ajout...\" : \"Ajouter\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Employee Confirmation Dialog */}\n      <AlertDialog open={deleteEmployeeDialogOpen} onOpenChange={setDeleteEmployeeDialogOpen}>\n        <AlertDialogContent data-testid=\"alert-delete-employee\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Êtes-vous sûr de vouloir retirer cet employé ?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Cette action est irréversible. L'employé \"{selectedEmployee?.nom}\" sera définitivement supprimé du système.\n              L'historique des paiements associés sera également supprimé.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete-employee\">Annuler</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => {\n                if (selectedEmployee) {\n                  deleteEmployeeMutation.mutate(selectedEmployee.id);\n                }\n              }}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete-employee\"\n            >\n              Supprimer définitivement\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Delete Application Confirmation Dialog */}\n      <AlertDialog open={deleteApplicationId !== null} onOpenChange={(open) => !open && setDeleteApplicationId(null)}>\n        <AlertDialogContent data-testid=\"alert-delete-application\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Êtes-vous sûr de vouloir supprimer cette candidature ?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Cette action est irréversible. La candidature sera définitivement supprimée du système.\n              Assurez-vous que cette candidature a bien été traitée avant de la supprimer.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete-application\">Annuler</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => {\n                if (deleteApplicationId) {\n                  deleteApplicationMutation.mutate(deleteApplicationId);\n                }\n              }}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete-application\"\n            >\n              Supprimer définitivement\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":55688},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport bcrypt from \"bcryptjs\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { eq } from \"drizzle-orm\";\nimport { adminUsers, type AdminUser } from \"@shared/schema\";\n\nconst initDb = () => {\n  const databaseUrl = process.env.DATABASE_URL;\n  if (!databaseUrl) {\n    throw new Error(\"DATABASE_URL environment variable is not defined\");\n  }\n  const sql = neon(databaseUrl);\n  return drizzle(sql);\n};\n\nconst db = initDb();\n\n// Configure passport local strategy\npassport.use(\n  new LocalStrategy(async (username, password, done) => {\n    try {\n      const [user] = await db\n        .select()\n        .from(adminUsers)\n        .where(eq(adminUsers.username, username))\n        .limit(1);\n\n      if (!user) {\n        return done(null, false, { message: \"Nom d'utilisateur incorrect\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.passwordHash);\n      if (!isValidPassword) {\n        return done(null, false, { message: \"Mot de passe incorrect\" });\n      }\n\n      return done(null, user);\n    } catch (error) {\n      return done(error);\n    }\n  })\n);\n\n// Serialize user for session\npassport.serializeUser((user: Express.User, done) => {\n  done(null, (user as AdminUser).id);\n});\n\n// Deserialize user from session\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const [user] = await db\n      .select()\n      .from(adminUsers)\n      .where(eq(adminUsers.id, id))\n      .limit(1);\n\n    if (!user) {\n      return done(null, false);\n    }\n\n    done(null, user);\n  } catch (error) {\n    done(error);\n  }\n});\n\n// Middleware to check if user is authenticated\nexport function isAuthenticated(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Non authentifié\" });\n}\n\nexport default passport;\n","size_bytes":1948},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&family=Inter:wght@300;400;500;600&family=Quicksand:wght@500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(145, 25%, 97%);\n  --foreground: hsl(0, 0%, 23%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 23%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 23%);\n  --primary: hsl(145, 63%, 49%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(25, 95%, 53%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(145, 20%, 92%);\n  --muted-foreground: hsl(0, 0%, 45%);\n  --accent: hsl(35, 90%, 65%);\n  --accent-foreground: hsl(0, 0%, 23%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(145, 20%, 88%);\n  --input: hsl(145, 20%, 88%);\n  --ring: hsl(145, 63%, 49%);\n  --radius: 0.75rem;\n  --font-sans: 'Inter', sans-serif;\n  --font-heading: 'Poppins', sans-serif;\n  --font-accent: 'Quicksand', sans-serif;\n}\n\n.dark {\n  --background: hsl(145, 15%, 8%);\n  --foreground: hsl(145, 10%, 91%);\n  --card: hsl(145, 12%, 12%);\n  --card-foreground: hsl(145, 10%, 85%);\n  --popover: hsl(145, 15%, 8%);\n  --popover-foreground: hsl(145, 10%, 91%);\n  --primary: hsl(145, 63%, 49%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(25, 85%, 45%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(145, 10%, 15%);\n  --muted-foreground: hsl(145, 5%, 50%);\n  --accent: hsl(35, 80%, 55%);\n  --accent-foreground: hsl(0, 0%, 23%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(145, 10%, 20%);\n  --input: hsl(145, 12%, 18%);\n  --ring: hsl(145, 63%, 49%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n    overflow-x: hidden;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-heading);\n  }\n}\n\n@layer components {\n  .mobile-container {\n    @apply max-w-[430px] mx-auto bg-white min-h-screen shadow-2xl;\n  }\n\n  .hero-gradient {\n    background: linear-gradient(135deg, hsl(145, 63%, 49%) 0%, hsl(35, 90%, 65%) 100%);\n  }\n\n  .card {\n    @apply bg-white rounded-xl border border-border shadow-sm transition-all duration-300;\n  }\n\n  .card:hover {\n    @apply shadow-md transform -translate-y-0.5;\n  }\n\n  .btn-primary {\n    @apply bg-primary text-primary-foreground border-none px-6 py-4 rounded-lg font-semibold text-base cursor-pointer transition-all duration-300;\n    font-family: var(--font-accent);\n    box-shadow: 0 4px 12px hsla(145, 63%, 49%, 0.3);\n  }\n\n  .btn-primary:hover {\n    @apply transform -translate-y-0.5;\n    background: hsl(145, 63%, 45%);\n    box-shadow: 0 6px 20px hsla(145, 63%, 49%, 0.4);\n  }\n\n  .btn-primary:disabled {\n    @apply opacity-60 pointer-events-none;\n  }\n\n  .btn-secondary {\n    @apply bg-white text-foreground border-2 border-border px-6 py-4 rounded-lg font-semibold text-base cursor-pointer transition-all duration-300;\n    font-family: var(--font-accent);\n  }\n\n  .btn-secondary:hover {\n    @apply bg-secondary border-primary;\n  }\n\n  .input-field {\n    @apply w-full p-4 border-2 border-border rounded-lg text-base transition-all duration-300 bg-white;\n    font-family: var(--font-sans);\n  }\n\n  .input-field:focus {\n    @apply outline-none border-primary;\n    box-shadow: 0 0 0 3px hsla(145, 63%, 49%, 0.2);\n  }\n\n  .icon-circle {\n    @apply w-14 h-14 rounded-full flex items-center justify-center text-2xl;\n  }\n\n  .service-badge {\n    @apply inline-block px-3 py-1.5 rounded-full text-xs font-medium bg-secondary text-secondary-foreground;\n  }\n\n  .price-tag {\n    @apply text-3xl font-bold text-primary;\n    font-family: var(--font-heading);\n  }\n\n  .success-message {\n    @apply bg-green-50 border-2 border-green-300 text-green-800 p-4 rounded-lg my-4;\n  }\n\n  .coming-soon-badge {\n    @apply absolute -top-2 -right-2 bg-accent text-accent-foreground px-3 py-1 rounded-xl text-xs font-semibold uppercase;\n  }\n\n  .floating-nav {\n    @apply fixed bottom-0 left-1/2 transform -translate-x-1/2 w-full max-w-[430px] bg-white shadow-lg px-6 py-3 pb-6 z-50;\n    box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.08);\n  }\n\n  .nav-item {\n    @apply flex flex-col items-center gap-1 text-muted-foreground transition-all duration-300 cursor-pointer;\n  }\n\n  .nav-item.active {\n    @apply text-primary;\n  }\n\n  .nav-card {\n    @apply bg-white rounded-xl p-5 shadow-lg transition-all duration-500 cursor-pointer;\n  }\n\n  .nav-card:hover {\n    @apply shadow-2xl;\n    transform: scale(1.05);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);\n  }\n\n  .nav-card-animated {\n    animation: slideUp 0.6s ease-out forwards;\n    opacity: 0;\n  }\n\n  .nav-card-delay-1 {\n    animation-delay: 0.1s;\n  }\n\n  .nav-card-delay-2 {\n    animation-delay: 0.2s;\n  }\n\n  .nav-card-delay-3 {\n    animation-delay: 0.3s;\n  }\n\n  .nav-card-delay-4 {\n    animation-delay: 0.4s;\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n}\n\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n","size_bytes":5295},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"shared/matching.ts":{"content":"import type { ParentRequest, NannyApplication } from \"./schema\";\n\nexport interface MatchScore {\n  requestId: string;\n  nannyId: string;\n  score: number; // 0-100\n  reasons: string[];\n}\n\nexport interface Match extends MatchScore {\n  request: ParentRequest;\n  nanny: NannyApplication;\n}\n\nexport function calculateMatchScore(\n  request: ParentRequest,\n  nanny: NannyApplication\n): MatchScore {\n  let score = 0;\n  const reasons: string[] = [];\n\n  const typeServiceMatch = calculateTypeMatch(request.typeService, nanny.typePoste);\n  score += typeServiceMatch.score;\n  if (typeServiceMatch.score > 0) {\n    reasons.push(typeServiceMatch.reason);\n  }\n\n  const locationMatch = calculateLocationMatch(request.adresse, nanny.adresse);\n  score += locationMatch.score;\n  if (locationMatch.score > 0) {\n    reasons.push(locationMatch.reason);\n  }\n\n  const experienceMatch = calculateExperienceMatch(nanny.experience);\n  score += experienceMatch.score;\n  if (experienceMatch.score > 0) {\n    reasons.push(experienceMatch.reason);\n  }\n\n  const availabilityMatch = calculateAvailabilityMatch(\n    request.horaireDebut,\n    request.horaireFin,\n    nanny.disponibilites\n  );\n  score += availabilityMatch.score;\n  if (availabilityMatch.score > 0) {\n    reasons.push(availabilityMatch.reason);\n  }\n\n  return {\n    requestId: request.id,\n    nannyId: nanny.id,\n    score: Math.round(score),\n    reasons,\n  };\n}\n\nfunction calculateTypeMatch(\n  requestType: string,\n  nannyType: string\n): { score: number; reason: string } {\n  const typeMapping: Record<string, string[]> = {\n    \"Garde régulière\": [\"Nounou à temps plein\", \"Nounou régulière\"],\n    \"Garde occasionnelle\": [\"Nounou occasionnelle\", \"Baby-sitter\"],\n    \"Week-end\": [\"Nounou occasionnelle\", \"Baby-sitter\"],\n    \"Aide aux devoirs\": [\"Éducateur/éducatrice\", \"Aide aux devoirs\"],\n    \"Aide à la personne\": [\"Aide à domicile\", \"Auxiliaire de vie\"],\n  };\n\n  const compatibleTypes = typeMapping[requestType] || [];\n  \n  if (compatibleTypes.includes(nannyType)) {\n    return {\n      score: 40,\n      reason: `Type de poste compatible (${nannyType})`,\n    };\n  }\n\n  if (requestType.toLowerCase().includes(nannyType.toLowerCase()) || \n      nannyType.toLowerCase().includes(requestType.toLowerCase())) {\n    return {\n      score: 20,\n      reason: \"Type de poste partiellement compatible\",\n    };\n  }\n\n  return { score: 0, reason: \"\" };\n}\n\nfunction calculateLocationMatch(\n  requestAddress: string,\n  nannyAddress: string\n): { score: number; reason: string } {\n  const requestLower = requestAddress.toLowerCase().trim();\n  const nannyLower = nannyAddress.toLowerCase().trim();\n\n  if (requestLower === nannyLower) {\n    return {\n      score: 25,\n      reason: \"Adresse identique\",\n    };\n  }\n\n  const requestWords = requestLower.split(/[\\s,]+/);\n  const nannyWords = nannyLower.split(/[\\s,]+/);\n  \n  const commonWords = requestWords.filter(word => \n    word.length > 2 && nannyWords.includes(word)\n  );\n\n  if (commonWords.length >= 2) {\n    return {\n      score: 20,\n      reason: `Localisation proche (${commonWords.slice(0, 2).join(\", \")})`,\n    };\n  }\n\n  if (commonWords.length === 1) {\n    return {\n      score: 10,\n      reason: `Même quartier/zone (${commonWords[0]})`,\n    };\n  }\n\n  return { score: 0, reason: \"\" };\n}\n\nfunction calculateExperienceMatch(\n  nannyExperience: string\n): { score: number; reason: string } {\n  const experienceLower = nannyExperience.toLowerCase();\n\n  if (experienceLower.includes(\"5 ans\") || experienceLower.includes(\"plus de 5\")) {\n    return {\n      score: 20,\n      reason: \"Très expérimentée (5+ ans)\",\n    };\n  }\n\n  if (experienceLower.includes(\"3 ans\") || experienceLower.includes(\"4 ans\")) {\n    return {\n      score: 15,\n      reason: \"Expérimentée (3-4 ans)\",\n    };\n  }\n\n  if (experienceLower.includes(\"1 an\") || experienceLower.includes(\"2 ans\")) {\n    return {\n      score: 10,\n      reason: \"Expérience confirmée (1-2 ans)\",\n    };\n  }\n\n  if (experienceLower.includes(\"débutant\") || experienceLower.includes(\"moins d'un an\")) {\n    return {\n      score: 5,\n      reason: \"Débutante motivée\",\n    };\n  }\n\n  return {\n    score: 5,\n    reason: \"Profil intéressant\",\n  };\n}\n\nfunction calculateAvailabilityMatch(\n  requestStart: string | null,\n  requestEnd: string | null,\n  nannyAvailability: string | null\n): { score: number; reason: string } {\n  if (!nannyAvailability || nannyAvailability.trim() === \"\") {\n    return { score: 5, reason: \"Disponibilités à discuter\" };\n  }\n\n  const availabilityLower = nannyAvailability.toLowerCase();\n\n  if (availabilityLower.includes(\"immédiat\") || availabilityLower.includes(\"tout de suite\")) {\n    return {\n      score: 15,\n      reason: \"Disponible immédiatement\",\n    };\n  }\n\n  if (availabilityLower.includes(\"flexible\") || availabilityLower.includes(\"toute la semaine\")) {\n    return {\n      score: 15,\n      reason: \"Horaires flexibles\",\n    };\n  }\n\n  if (requestStart && requestEnd) {\n    const requestHours = `${requestStart}-${requestEnd}`.toLowerCase();\n    \n    if (availabilityLower.includes(requestStart) || availabilityLower.includes(requestEnd)) {\n      return {\n        score: 10,\n        reason: \"Disponibilités compatibles avec horaires demandés\",\n      };\n    }\n  }\n\n  if (availabilityLower.includes(\"week-end\") || availabilityLower.includes(\"samedi\") || availabilityLower.includes(\"dimanche\")) {\n    return {\n      score: 10,\n      reason: \"Disponible en week-end\",\n    };\n  }\n\n  return {\n    score: 5,\n    reason: \"Disponibilités à vérifier\",\n  };\n}\n\nexport function findBestMatches(\n  requests: ParentRequest[],\n  nannies: NannyApplication[],\n  minScore: number = 30\n): Match[] {\n  const matches: Match[] = [];\n\n  for (const request of requests) {\n    if (request.statut !== \"en_attente\") continue;\n\n    for (const nanny of nannies) {\n      if (nanny.statut === \"traite\") continue;\n\n      const matchScore = calculateMatchScore(request, nanny);\n      \n      if (matchScore.score >= minScore) {\n        matches.push({\n          ...matchScore,\n          request,\n          nanny,\n        });\n      }\n    }\n  }\n\n  return matches.sort((a, b) => b.score - a.score);\n}\n\nexport function getBestMatchForRequest(\n  request: ParentRequest,\n  nannies: NannyApplication[]\n): Match | null {\n  let bestMatch: Match | null = null;\n  let bestScore = 0;\n\n  for (const nanny of nannies) {\n    if (nanny.statut === \"traite\") continue;\n\n    const matchScore = calculateMatchScore(request, nanny);\n    \n    if (matchScore.score > bestScore) {\n      bestScore = matchScore.score;\n      bestMatch = {\n        ...matchScore,\n        request,\n        nanny,\n      };\n    }\n  }\n\n  return bestMatch && bestMatch.score >= 30 ? bestMatch : null;\n}\n","size_bytes":6681},"client/src/pages/matching.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { \n  ArrowLeft,\n  Heart,\n  MapPin,\n  Calendar,\n  Award,\n  Phone\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useEffect } from \"react\";\nimport type { Match } from \"@shared/matching\";\n\nexport default function MatchingPage() {\n  const [, setLocation] = useLocation();\n\n  const { data: user, isLoading: userLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  const { data: matches = [], isLoading: matchesLoading } = useQuery<Match[]>({\n    queryKey: [\"/api/matches\"],\n  });\n\n  useEffect(() => {\n    if (!userLoading && !user) {\n      setLocation(\"/admin/login\");\n    }\n  }, [user, userLoading, setLocation]);\n\n  if (userLoading || matchesLoading) {\n    return (\n      <div className=\"mobile-container min-h-screen bg-background flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Chargement...</p>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const getScoreColor = (score: number): string => {\n    if (score >= 70) return \"text-green-600 dark:text-green-400\";\n    if (score >= 50) return \"text-blue-600 dark:text-blue-400\";\n    if (score >= 30) return \"text-yellow-600 dark:text-yellow-400\";\n    return \"text-gray-600 dark:text-gray-400\";\n  };\n\n  const getScoreBg = (score: number): string => {\n    if (score >= 70) return \"bg-green-100 dark:bg-green-900\";\n    if (score >= 50) return \"bg-blue-100 dark:bg-blue-900\";\n    if (score >= 30) return \"bg-yellow-100 dark:bg-yellow-900\";\n    return \"bg-gray-100 dark:bg-gray-900\";\n  };\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-background pb-20\">\n      <div className=\"p-4 sm:p-6 w-full\">\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/admin\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-heading font-bold text-primary\">\n              Suggestions de Matching\n            </h1>\n            <p className=\"text-sm text-muted-foreground\">\n              {matches.length} correspondance{matches.length > 1 ? 's' : ''} trouvée{matches.length > 1 ? 's' : ''}\n            </p>\n          </div>\n        </div>\n\n        {matches.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <Heart className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n              <p className=\"text-muted-foreground\">\n                Aucune correspondance trouvée pour le moment\n              </p>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Les matches apparaîtront automatiquement quand des profils compatibles seront disponibles\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-4\">\n            {matches.map((match) => (\n              <Card key={`${match.requestId}-${match.nannyId}`} className=\"overflow-hidden\">\n                <CardHeader className={`${getScoreBg(match.score)} pb-3`}>\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-base font-semibold flex items-center gap-2\">\n                        <Heart className=\"w-5 h-5 text-primary\" />\n                        Match trouvé\n                      </CardTitle>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        Score de compatibilité\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className={`text-3xl font-bold ${getScoreColor(match.score)}`}>\n                        {match.score}%\n                      </div>\n                    </div>\n                  </div>\n                  <Progress value={match.score} className=\"mt-3 h-2\" />\n                </CardHeader>\n\n                <CardContent className=\"pt-4\">\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\" className=\"bg-pink-50 dark:bg-pink-900/20 border-pink-200 dark:border-pink-800\">\n                          Demande Parent\n                        </Badge>\n                      </div>\n                      \n                      <div>\n                        <p className=\"font-semibold text-foreground\">{match.request.nom}</p>\n                        <div className=\"space-y-1 mt-2\">\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <Phone className=\"w-4 h-4\" />\n                            {match.request.telephone}\n                          </div>\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <MapPin className=\"w-4 h-4\" />\n                            {match.request.adresse}\n                          </div>\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <Calendar className=\"w-4 h-4\" />\n                            {match.request.typeService}\n                          </div>\n                          {match.request.horaireDebut && match.request.horaireFin && (\n                            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                              <Calendar className=\"w-4 h-4\" />\n                              {match.request.horaireDebut} - {match.request.horaireFin}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\" className=\"bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800\">\n                          Nounou Suggérée\n                        </Badge>\n                      </div>\n                      \n                      <div>\n                        <p className=\"font-semibold text-foreground\">{match.nanny.nom}</p>\n                        <div className=\"space-y-1 mt-2\">\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <Phone className=\"w-4 h-4\" />\n                            {match.nanny.telephone}\n                          </div>\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <MapPin className=\"w-4 h-4\" />\n                            {match.nanny.adresse}\n                          </div>\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <Award className=\"w-4 h-4\" />\n                            {match.nanny.typePoste}\n                          </div>\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <Award className=\"w-4 h-4\" />\n                            {match.nanny.experience}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {match.reasons.length > 0 && (\n                    <div className=\"mt-4 pt-4 border-t border-border\">\n                      <p className=\"text-sm font-medium text-foreground mb-2\">\n                        Raisons du matching :\n                      </p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {match.reasons.map((reason, idx) => (\n                          <Badge \n                            key={idx} \n                            variant=\"secondary\"\n                            className=\"text-xs\"\n                          >\n                            {reason}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"mt-4 pt-4 border-t border-border flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        window.location.href = `tel:${match.nanny.telephone}`;\n                      }}\n                      data-testid={`button-call-${match.nannyId}`}\n                      className=\"flex-1\"\n                    >\n                      <Phone className=\"w-4 h-4 mr-2\" />\n                      Appeler la nounou\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        window.location.href = `tel:${match.request.telephone}`;\n                      }}\n                      data-testid={`button-call-parent-${match.requestId}`}\n                      className=\"flex-1\"\n                    >\n                      <Phone className=\"w-4 h-4 mr-2\" />\n                      Appeler le parent\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9820},"client/src/pages/admin-profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, User, Lock, Mail, Shield, Check, Edit, X } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\nimport { updateAdminProfileSchema } from \"@shared/schema\";\n\nconst changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Le mot de passe actuel est obligatoire\"),\n  newPassword: z.string().min(6, \"Le nouveau mot de passe doit contenir au moins 6 caractères\"),\n  confirmPassword: z.string().min(1, \"La confirmation est obligatoire\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Les mots de passe ne correspondent pas\",\n  path: [\"confirmPassword\"],\n});\n\ntype ChangePasswordForm = z.infer<typeof changePasswordSchema>;\ntype UpdateProfileForm = z.infer<typeof updateAdminProfileSchema>;\n\nexport default function AdminProfile() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [isEditingProfile, setIsEditingProfile] = useState(false);\n\n  // Fetch current user info\n  const { data: authData, isLoading } = useQuery({\n    queryKey: ['/api/auth/user'],\n  });\n\n  const user = (authData as any)?.user;\n\n  const form = useForm<ChangePasswordForm>({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const profileForm = useForm<UpdateProfileForm>({\n    resolver: zodResolver(updateAdminProfileSchema),\n    defaultValues: {\n      username: user?.username || \"\",\n      nom: user?.nom || \"\",\n      email: user?.email || \"\",\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: UpdateProfileForm) => {\n      const response = await apiRequest(\"PUT\", \"/api/admin/profile\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      setIsEditingProfile(false);\n      toast({\n        title: \"Profil mis à jour\",\n        description: \"Vos informations ont été modifiées avec succès.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: error.message || \"Impossible de mettre à jour le profil.\",\n      });\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: ChangePasswordForm) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/change-password\", {\n        currentPassword: data.currentPassword,\n        newPassword: data.newPassword,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      setShowSuccess(true);\n      form.reset();\n      toast({\n        title: \"Mot de passe modifié\",\n        description: \"Votre mot de passe a été changé avec succès.\",\n      });\n      setTimeout(() => {\n        setShowSuccess(false);\n      }, 3000);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: error.message || \"Impossible de changer le mot de passe. Vérifiez votre mot de passe actuel.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ChangePasswordForm) => {\n    changePasswordMutation.mutate(data);\n  };\n\n  const onProfileSubmit = (data: UpdateProfileForm) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  // Update form when user data changes\n  useEffect(() => {\n    if (user && !isEditingProfile) {\n      profileForm.setValue('username', user.username);\n      profileForm.setValue('nom', user.nom);\n      profileForm.setValue('email', user.email);\n    }\n  }, [user, isEditingProfile, profileForm]);\n\n  if (isLoading) {\n    return (\n      <div className=\"mobile-container min-h-screen bg-background flex items-center justify-center\">\n        <p>Chargement...</p>\n      </div>\n    );\n  }\n\n  if (!user) {\n    navigate(\"/admin/login\");\n    return null;\n  }\n\n  return (\n    <div className=\"mobile-container min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"bg-primary p-4 sm:p-6\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/admin\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-white\" data-testid=\"button-back\">\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n          </Link>\n          <div>\n            <h2 className=\"text-xl font-bold text-white font-heading\">Profil Administrateur</h2>\n            <p className=\"text-sm text-white/90\">Gérer votre compte</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-4 sm:p-6 pb-32 space-y-6 w-full\">\n        {/* User Info Card */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"text-primary w-5 h-5\" />\n                Informations du compte\n              </CardTitle>\n              {!isEditingProfile ? (\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => setIsEditingProfile(true)}\n                  data-testid=\"button-edit-profile\"\n                >\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Modifier\n                </Button>\n              ) : (\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => {\n                    setIsEditingProfile(false);\n                    profileForm.reset();\n                  }}\n                  data-testid=\"button-cancel-edit\"\n                >\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Annuler\n                </Button>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {!isEditingProfile ? (\n              <>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"icon-circle bg-primary/20 shrink-0\">\n                    <Shield className=\"text-primary w-5 h-5\" />\n                  </div>\n                  <div className=\"min-w-0 flex-1\">\n                    <p className=\"text-sm text-muted-foreground\">Nom d'utilisateur</p>\n                    <p className=\"font-semibold break-words\" data-testid=\"text-username\">{user.username}</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"icon-circle bg-accent/30 shrink-0\">\n                    <User className=\"text-accent-foreground w-5 h-5\" />\n                  </div>\n                  <div className=\"min-w-0 flex-1\">\n                    <p className=\"text-sm text-muted-foreground\">Nom complet</p>\n                    <p className=\"font-semibold break-words\" data-testid=\"text-fullname\">{user.nom}</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"icon-circle bg-secondary shrink-0\">\n                    <Mail className=\"text-secondary-foreground w-5 h-5\" />\n                  </div>\n                  <div className=\"min-w-0 flex-1\">\n                    <p className=\"text-sm text-muted-foreground\">Email</p>\n                    <p className=\"font-semibold break-words\" data-testid=\"text-email\">{user.email}</p>\n                  </div>\n                </div>\n              </>\n            ) : (\n              <Form {...profileForm}>\n                <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={profileForm.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nom d'utilisateur *</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            placeholder=\"Votre nom d'utilisateur\" \n                            className=\"input-field\"\n                            data-testid=\"input-username\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={profileForm.control}\n                    name=\"nom\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nom complet *</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            placeholder=\"Votre nom complet\" \n                            className=\"input-field\"\n                            data-testid=\"input-nom\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={profileForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email *</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            type=\"email\"\n                            placeholder=\"votre@email.com\" \n                            className=\"input-field\"\n                            data-testid=\"input-email\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button \n                    type=\"submit\" \n                    className=\"btn-primary w-full\" \n                    disabled={updateProfileMutation.isPending}\n                    data-testid=\"button-save-profile\"\n                  >\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    {updateProfileMutation.isPending ? \"Enregistrement...\" : \"Enregistrer les modifications\"}\n                  </Button>\n                </form>\n              </Form>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Change Password Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Lock className=\"text-primary w-5 h-5\" />\n              Changer le mot de passe\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {showSuccess && (\n              <div className=\"bg-green-50 border-2 border-green-300 text-green-800 p-4 rounded-lg mb-4 flex items-center gap-2\">\n                <Check className=\"w-5 h-5\" />\n                <p className=\"text-sm font-medium\">Mot de passe changé avec succès !</p>\n              </div>\n            )}\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"currentPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Mot de passe actuel *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"password\"\n                          placeholder=\"Votre mot de passe actuel\" \n                          className=\"input-field\"\n                          data-testid=\"input-current-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"newPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nouveau mot de passe *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"password\"\n                          placeholder=\"Au moins 6 caractères\" \n                          className=\"input-field\"\n                          data-testid=\"input-new-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirmer le nouveau mot de passe *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"password\"\n                          placeholder=\"Retapez le nouveau mot de passe\" \n                          className=\"input-field\"\n                          data-testid=\"input-confirm-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"btn-primary w-full\" \n                  disabled={changePasswordMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  <Lock className=\"w-4 h-4 mr-2\" />\n                  {changePasswordMutation.isPending ? \"Changement en cours...\" : \"Changer le mot de passe\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Security Notice */}\n        <div className=\"bg-secondary/50 rounded-lg p-4 border-2 border-accent/30 w-full\">\n          <p className=\"text-sm text-foreground\">\n            <strong>Conseil de sécurité :</strong> Utilisez un mot de passe fort avec au moins 8 caractères, incluant des lettres, des chiffres et des symboles.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14896},"server/init-db.ts":{"content":"import { neon } from \"@neondatabase/serverless\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { eq } from \"drizzle-orm\";\nimport { adminUsers } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nconst initDb = () => {\n  const databaseUrl = process.env.DATABASE_URL;\n  if (!databaseUrl) {\n    throw new Error(\"DATABASE_URL environment variable is not defined\");\n  }\n  const sql = neon(databaseUrl);\n  return drizzle(sql);\n};\n\nexport async function ensureAdminExists() {\n  try {\n    const db = initDb();\n    \n    // Check if admin user exists\n    const [existingAdmin] = await db\n      .select()\n      .from(adminUsers)\n      .where(eq(adminUsers.username, \"admin\"))\n      .limit(1);\n    \n    if (existingAdmin) {\n      console.log(\"✓ Admin user already exists\");\n      return;\n    }\n    \n    // Create default admin user\n    const passwordHash = await bcrypt.hash(\"admin123\", 10);\n    \n    await db.insert(adminUsers).values({\n      username: \"admin\",\n      nom: \"Administrateur\",\n      email: \"admin@gardedesenfantsgabon.com\",\n      passwordHash,\n      role: \"admin\",\n    });\n    \n    console.log(\"✓ Default admin user created successfully (username: admin)\");\n    console.log(\"⚠️  IMPORTANT: Change the default admin password immediately via /admin/profile\");\n  } catch (error) {\n    console.error(\"Error initializing admin user:\", error);\n    // Don't throw - we don't want to crash the app if admin creation fails\n  }\n}\n","size_bytes":1445},"client/src/pages/admin-direct-login.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport default function AdminDirectLogin() {\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Check if already authenticated\n    fetch('/api/auth/user', { credentials: 'include' })\n      .then(res => res.json())\n      .then(data => {\n        if (data.user) {\n          // Already logged in, redirect to admin\n          setLocation('/admin');\n        }\n      })\n      .catch(() => {\n        // Not authenticated, stay on this page\n      });\n  }, [setLocation]);\n\n  useEffect(() => {\n    const handleSubmit = async (e: Event) => {\n      e.preventDefault();\n      \n      const form = e.target as HTMLFormElement;\n      const username = (form.querySelector('#username') as HTMLInputElement)?.value;\n      const password = (form.querySelector('#password') as HTMLInputElement)?.value;\n      const submitBtn = form.querySelector('#submit-btn') as HTMLButtonElement;\n      const errorDiv = form.querySelector('#error-msg') as HTMLDivElement;\n\n      if (!username || !password) {\n        if (errorDiv) {\n          errorDiv.textContent = 'Veuillez remplir tous les champs';\n          errorDiv.style.display = 'block';\n        }\n        return;\n      }\n\n      if (submitBtn) {\n        submitBtn.disabled = true;\n        submitBtn.textContent = 'Connexion...';\n      }\n\n      try {\n        const response = await fetch('/api/auth/login', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: 'include',\n          body: JSON.stringify({ username, password })\n        });\n\n        const data = await response.json();\n\n        if (response.ok) {\n          // Success - redirect to admin\n          window.location.href = '/admin';\n        } else {\n          // Error\n          if (errorDiv) {\n            errorDiv.textContent = data.message || 'Identifiants incorrects';\n            errorDiv.style.display = 'block';\n          }\n          if (submitBtn) {\n            submitBtn.disabled = false;\n            submitBtn.textContent = 'Se connecter';\n          }\n        }\n      } catch (error) {\n        if (errorDiv) {\n          errorDiv.textContent = 'Erreur de connexion';\n          errorDiv.style.display = 'block';\n        }\n        if (submitBtn) {\n          submitBtn.disabled = false;\n          submitBtn.textContent = 'Se connecter';\n        }\n      }\n    };\n\n    const form = document.getElementById('login-form');\n    if (form) {\n      form.addEventListener('submit', handleSubmit);\n      return () => form.removeEventListener('submit', handleSubmit);\n    }\n  }, []);\n\n  return (\n    <div style={{\n      minHeight: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: 'linear-gradient(135deg, hsl(145, 63%, 49%) 0%, hsl(25, 95%, 53%) 100%)',\n      padding: '24px'\n    }}>\n      <div style={{\n        background: 'white',\n        borderRadius: '12px',\n        boxShadow: '0 10px 40px rgba(0,0,0,0.1)',\n        padding: '32px',\n        width: '100%',\n        maxWidth: '400px'\n      }}>\n        <div style={{ textAlign: 'center', marginBottom: '24px' }}>\n          <div style={{\n            width: '64px',\n            height: '64px',\n            background: 'hsl(145, 63%, 49%, 0.2)',\n            borderRadius: '50%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            margin: '0 auto 16px'\n          }}>\n            <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"hsl(145, 63%, 49%)\" strokeWidth=\"2\">\n              <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\"></rect>\n              <path d=\"M7 11V7a5 5 0 0 1 10 0v4\"></path>\n            </svg>\n          </div>\n          <h1 style={{\n            fontSize: '24px',\n            fontWeight: 'bold',\n            color: '#1a1a1a',\n            marginBottom: '8px'\n          }}>Administration</h1>\n          <p style={{\n            fontSize: '14px',\n            color: '#666'\n          }}>Connexion à l'espace d'administration</p>\n        </div>\n\n        <form id=\"login-form\">\n          <div id=\"error-msg\" style={{\n            display: 'none',\n            background: '#fee',\n            color: '#c33',\n            padding: '12px',\n            borderRadius: '6px',\n            marginBottom: '16px',\n            fontSize: '14px'\n          }}></div>\n\n          <div style={{ marginBottom: '16px' }}>\n            <label htmlFor=\"username\" style={{\n              display: 'block',\n              fontSize: '14px',\n              fontWeight: '500',\n              marginBottom: '8px',\n              color: '#1a1a1a'\n            }}>Nom d'utilisateur</label>\n            <input\n              type=\"text\"\n              id=\"username\"\n              name=\"username\"\n              autoComplete=\"username\"\n              placeholder=\"admin\"\n              style={{\n                width: '100%',\n                padding: '10px 12px',\n                border: '1px solid #ddd',\n                borderRadius: '6px',\n                fontSize: '16px',\n                boxSizing: 'border-box'\n              }}\n            />\n          </div>\n\n          <div style={{ marginBottom: '24px' }}>\n            <label htmlFor=\"password\" style={{\n              display: 'block',\n              fontSize: '14px',\n              fontWeight: '500',\n              marginBottom: '8px',\n              color: '#1a1a1a'\n            }}>Mot de passe</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              autoComplete=\"current-password\"\n              placeholder=\"••••••••\"\n              style={{\n                width: '100%',\n                padding: '10px 12px',\n                border: '1px solid #ddd',\n                borderRadius: '6px',\n                fontSize: '16px',\n                boxSizing: 'border-box'\n              }}\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            id=\"submit-btn\"\n            style={{\n              width: '100%',\n              background: 'hsl(145, 63%, 49%)',\n              color: 'white',\n              border: 'none',\n              padding: '12px 24px',\n              borderRadius: '6px',\n              fontSize: '16px',\n              fontWeight: '500',\n              cursor: 'pointer',\n              transition: 'background 0.2s'\n            }}\n            onMouseOver={(e) => e.currentTarget.style.background = 'hsl(145, 63%, 42%)'}\n            onMouseOut={(e) => e.currentTarget.style.background = 'hsl(145, 63%, 49%)'}\n          >\n            Se connecter\n          </button>\n        </form>\n\n        <div style={{\n          marginTop: '24px',\n          textAlign: 'center',\n          fontSize: '12px',\n          color: '#999'\n        }}>\n          Identifiants par défaut : admin / admin123\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6909},"client/src/pages/admin-parametres.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { ArrowLeft, Save } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\ntype ParametreSite = {\n  id: string;\n  cle: string;\n  valeur: string;\n  dateModification: Date;\n};\n\nexport default function AdminParametres() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const [formData, setFormData] = useState({\n    email: \"\",\n    telephone: \"\",\n    adresse: \"\",\n  });\n\n  // Fetch all site parameters (array of key-value pairs)\n  const { data: parametres = [], isLoading } = useQuery<ParametreSite[]>({\n    queryKey: [\"/api/parametres-site\"],\n  });\n\n  // Load data into form when fetched\n  useEffect(() => {\n    if (parametres.length > 0) {\n      const emailParam = parametres.find(p => p.cle === \"email\");\n      const telephoneParam = parametres.find(p => p.cle === \"telephone\");\n      const adresseParam = parametres.find(p => p.cle === \"adresse\");\n\n      setFormData({\n        email: emailParam?.valeur || \"\",\n        telephone: telephoneParam?.valeur || \"\",\n        adresse: adresseParam?.valeur || \"\",\n      });\n    }\n  }, [parametres]);\n\n  // Update mutation (creates or updates all 3 parameters)\n  // Note: apiRequest already checks response.ok via throwIfResNotOk\n  const updateMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      // Fetch fresh data to check existence (apiRequest throws if not ok)\n      const response = await apiRequest(\"GET\", \"/api/parametres-site\");\n      const freshParametres = await response.json() as ParametreSite[];\n      \n      // Check which parameters exist in fresh data\n      const emailExists = freshParametres.find(p => p.cle === \"email\");\n      const telephoneExists = freshParametres.find(p => p.cle === \"telephone\");\n      const adresseExists = freshParametres.find(p => p.cle === \"adresse\");\n\n      // Create or update each parameter (apiRequest throws if not ok)\n      const updates = await Promise.all([\n        (async () => {\n          const res = emailExists\n            ? await apiRequest(\"PATCH\", \"/api/parametres-site/email\", { valeur: data.email })\n            : await apiRequest(\"POST\", \"/api/parametres-site\", { cle: \"email\", valeur: data.email });\n          return res.json();\n        })(),\n        (async () => {\n          const res = telephoneExists\n            ? await apiRequest(\"PATCH\", \"/api/parametres-site/telephone\", { valeur: data.telephone })\n            : await apiRequest(\"POST\", \"/api/parametres-site\", { cle: \"telephone\", valeur: data.telephone });\n          return res.json();\n        })(),\n        (async () => {\n          const res = adresseExists\n            ? await apiRequest(\"PATCH\", \"/api/parametres-site/adresse\", { valeur: data.adresse })\n            : await apiRequest(\"POST\", \"/api/parametres-site\", { cle: \"adresse\", valeur: data.adresse });\n          return res.json();\n        })(),\n      ]);\n      return updates;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/parametres-site\"] });\n      toast({ title: \"Paramètres mis à jour avec succès\" });\n    },\n    onError: (error: any) => {\n      console.error(\"Error updating parameters:\", error);\n      toast({ \n        title: \"Erreur lors de la mise à jour\", \n        description: error?.message || \"Vérifiez les logs pour plus de détails\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: keyof typeof formData, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-orange-50 pb-20\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-primary to-secondary text-white p-6 shadow-lg\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <Button\n              variant=\"ghost\"\n              className=\"text-white hover:bg-white/20\"\n              onClick={() => setLocation(\"/admin\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-5 h-5 mr-2\" />\n              Retour au Dashboard\n            </Button>\n          </div>\n          <h1 className=\"text-3xl font-bold font-heading\">Paramètres du Site</h1>\n          <p className=\"text-white/90 mt-2\">Gérer les informations de contact</p>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        {isLoading ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\">Chargement...</p>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card>\n            <CardHeader>\n              <CardTitle>Informations de Contact</CardTitle>\n              <CardDescription>\n                Ces informations seront affichées sur la page Contact publique\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email de contact</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                    placeholder=\"contact@example.com\"\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"telephone\">Téléphone de contact</Label>\n                  <Input\n                    id=\"telephone\"\n                    type=\"tel\"\n                    value={formData.telephone}\n                    onChange={(e) => handleInputChange(\"telephone\", e.target.value)}\n                    placeholder=\"+241 XX XX XX XX\"\n                    required\n                    data-testid=\"input-telephone\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"adresse\">Adresse</Label>\n                  <Input\n                    id=\"adresse\"\n                    type=\"text\"\n                    value={formData.adresse}\n                    onChange={(e) => handleInputChange(\"adresse\", e.target.value)}\n                    placeholder=\"Libreville, Gabon\"\n                    required\n                    data-testid=\"input-adresse\"\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={updateMutation.isPending}\n                  data-testid=\"button-save\"\n                >\n                  {updateMutation.isPending ? (\n                    \"Enregistrement...\"\n                  ) : (\n                    <>\n                      <Save className=\"w-5 h-5 mr-2\" />\n                      Enregistrer les modifications\n                    </>\n                  )}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7714},"client/src/pages/admin-prestations.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Plus, Pencil, Trash2, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Prestation } from \"@shared/schema\";\n\nexport default function AdminPrestations() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingPrestation, setEditingPrestation] = useState<Prestation | null>(null);\n  const [formData, setFormData] = useState({\n    nom: \"\",\n    description: \"\",\n    horaireDebut: \"\",\n    horaireFin: \"\",\n    prix: 0,\n    unite: \"\",\n    actif: true,\n  });\n\n  // Fetch prestations\n  const { data: prestations = [], isLoading } = useQuery<Prestation[]>({\n    queryKey: [\"/api/prestations\"],\n  });\n\n  // Create mutation\n  const createMutation = useMutation({\n    mutationFn: (data: typeof formData) =>\n      apiRequest(\"POST\", \"/api/prestations\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prestations\"] });\n      toast({ title: \"Prestation créée avec succès\" });\n      closeDialog();\n    },\n    onError: () => {\n      toast({ title: \"Erreur lors de la création\", variant: \"destructive\" });\n    },\n  });\n\n  // Update mutation\n  const updateMutation = useMutation({\n    mutationFn: (data: { id: string; updates: Partial<typeof formData> }) =>\n      apiRequest(\"PATCH\", `/api/prestations/${data.id}`, data.updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prestations\"] });\n      toast({ title: \"Prestation modifiée avec succès\" });\n      closeDialog();\n    },\n    onError: () => {\n      toast({ title: \"Erreur lors de la modification\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(\"DELETE\", `/api/prestations/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prestations\"] });\n      toast({ title: \"Prestation supprimée avec succès\" });\n    },\n    onError: () => {\n      toast({ title: \"Erreur lors de la suppression\", variant: \"destructive\" });\n    },\n  });\n\n  const openCreateDialog = () => {\n    setEditingPrestation(null);\n    setFormData({\n      nom: \"\",\n      description: \"\",\n      horaireDebut: \"\",\n      horaireFin: \"\",\n      prix: 0,\n      unite: \"\",\n      actif: true,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const openEditDialog = (prestation: Prestation) => {\n    setEditingPrestation(prestation);\n    setFormData({\n      nom: prestation.nom,\n      description: prestation.description || \"\",\n      horaireDebut: prestation.horaireDebut || \"\",\n      horaireFin: prestation.horaireFin || \"\",\n      prix: prestation.prix,\n      unite: prestation.unite,\n      actif: prestation.actif ?? true,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const closeDialog = () => {\n    setIsDialogOpen(false);\n    setEditingPrestation(null);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingPrestation) {\n      updateMutation.mutate({\n        id: editingPrestation.id,\n        updates: formData,\n      });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Êtes-vous sûr de vouloir supprimer cette prestation ?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[hsl(145,25%,97%)] pb-20\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-[hsl(145,63%,49%)] to-[hsl(25,95%,53%)] text-white p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/admin\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"text-white hover:bg-white/20\"\n                  data-testid=\"button-back\"\n                >\n                  <ArrowLeft className=\"h-5 w-5\" />\n                </Button>\n              </Link>\n              <h1 className=\"text-2xl md:text-3xl font-semibold font-['Poppins']\">\n                Gestion des Prestations\n              </h1>\n            </div>\n            <Button\n              onClick={openCreateDialog}\n              className=\"bg-white text-[hsl(145,63%,49%)] hover:bg-white/90\"\n              data-testid=\"button-add-prestation\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Ajouter\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto p-6\">\n        <div className=\"bg-white rounded-lg shadow-sm\">\n          {isLoading ? (\n            <div className=\"p-8 text-center text-gray-500\">Chargement...</div>\n          ) : prestations.length === 0 ? (\n            <div className=\"p-8 text-center text-gray-500\">\n              Aucune prestation trouvée\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"font-semibold text-gray-700\">Nom</TableHead>\n                  <TableHead className=\"font-semibold text-gray-700 hidden md:table-cell\">\n                    Description\n                  </TableHead>\n                  <TableHead className=\"font-semibold text-gray-700 hidden md:table-cell\">\n                    Horaires\n                  </TableHead>\n                  <TableHead className=\"font-semibold text-gray-700\">Prix</TableHead>\n                  <TableHead className=\"font-semibold text-gray-700 hidden sm:table-cell\">\n                    Statut\n                  </TableHead>\n                  <TableHead className=\"font-semibold text-gray-700 text-right\">\n                    Actions\n                  </TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {prestations.map((prestation) => (\n                  <TableRow\n                    key={prestation.id}\n                    className=\"hover:bg-[hsl(145,63%,95%)]\"\n                    data-testid={`row-prestation-${prestation.id}`}\n                  >\n                    <TableCell className=\"font-medium\" data-testid={`text-nom-${prestation.id}`}>\n                      {prestation.nom}\n                    </TableCell>\n                    <TableCell className=\"hidden md:table-cell max-w-xs truncate\">\n                      {prestation.description}\n                    </TableCell>\n                    <TableCell className=\"hidden md:table-cell\">\n                      {prestation.horaireDebut && prestation.horaireFin\n                        ? `${prestation.horaireDebut} - ${prestation.horaireFin}`\n                        : \"-\"}\n                    </TableCell>\n                    <TableCell data-testid={`text-prix-${prestation.id}`}>\n                      {prestation.prix > 0 ? `${prestation.prix} ${prestation.unite}` : prestation.unite}\n                    </TableCell>\n                    <TableCell className=\"hidden sm:table-cell\">\n                      <span\n                        className={`inline-flex items-center rounded-full px-3 py-1 text-xs font-medium ${\n                          prestation.actif\n                            ? \"bg-[hsl(145,63%,95%)] text-[hsl(145,63%,30%)]\"\n                            : \"bg-gray-100 text-gray-700\"\n                        }`}\n                        data-testid={`status-${prestation.id}`}\n                      >\n                        {prestation.actif ? \"Active\" : \"Inactive\"}\n                      </span>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => openEditDialog(prestation)}\n                          className=\"hover:bg-gray-100\"\n                          data-testid={`button-edit-${prestation.id}`}\n                        >\n                          <Pencil className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleDelete(prestation.id)}\n                          className=\"hover:bg-red-100 text-red-600\"\n                          data-testid={`button-delete-${prestation.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </div>\n      </div>\n\n      {/* Create/Edit Dialog */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl font-semibold font-['Poppins']\">\n              {editingPrestation ? \"Modifier la prestation\" : \"Ajouter une prestation\"}\n            </DialogTitle>\n            <DialogDescription>\n              {editingPrestation\n                ? \"Modifiez les informations de la prestation\"\n                : \"Créez une nouvelle prestation de service\"}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleSubmit}>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"nom\">Nom de la prestation *</Label>\n                <Input\n                  id=\"nom\"\n                  value={formData.nom}\n                  onChange={(e) => setFormData({ ...formData, nom: e.target.value })}\n                  required\n                  data-testid=\"input-nom\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) =>\n                    setFormData({ ...formData, description: e.target.value })\n                  }\n                  rows={3}\n                  data-testid=\"input-description\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"horaireDebut\">Horaire début</Label>\n                  <Input\n                    id=\"horaireDebut\"\n                    type=\"time\"\n                    value={formData.horaireDebut}\n                    onChange={(e) =>\n                      setFormData({ ...formData, horaireDebut: e.target.value })\n                    }\n                    data-testid=\"input-horaire-debut\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"horaireFin\">Horaire fin</Label>\n                  <Input\n                    id=\"horaireFin\"\n                    type=\"time\"\n                    value={formData.horaireFin}\n                    onChange={(e) =>\n                      setFormData({ ...formData, horaireFin: e.target.value })\n                    }\n                    data-testid=\"input-horaire-fin\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"prix\">Prix</Label>\n                  <Input\n                    id=\"prix\"\n                    type=\"number\"\n                    value={formData.prix}\n                    onChange={(e) =>\n                      setFormData({ ...formData, prix: parseFloat(e.target.value) })\n                    }\n                    min=\"0\"\n                    data-testid=\"input-prix\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"unite\">Unité *</Label>\n                  <Input\n                    id=\"unite\"\n                    value={formData.unite}\n                    onChange={(e) =>\n                      setFormData({ ...formData, unite: e.target.value })\n                    }\n                    placeholder=\"ex: FCFA/mois, FCFA/jour\"\n                    required\n                    data-testid=\"input-unite\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"actif\"\n                  checked={formData.actif}\n                  onCheckedChange={(checked) =>\n                    setFormData({ ...formData, actif: checked })\n                  }\n                  data-testid=\"switch-actif\"\n                />\n                <Label htmlFor=\"actif\" className=\"cursor-pointer\">\n                  Prestation active\n                </Label>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={closeDialog}\n                data-testid=\"button-cancel\"\n              >\n                Annuler\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createMutation.isPending || updateMutation.isPending}\n                className=\"bg-[hsl(145,63%,49%)] hover:bg-[hsl(145,63%,42%)]\"\n                data-testid=\"button-submit\"\n              >\n                {createMutation.isPending || updateMutation.isPending\n                  ? \"Enregistrement...\"\n                  : editingPrestation\n                  ? \"Modifier\"\n                  : \"Créer\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":14519},"design_guidelines.md":{"content":"# Design Guidelines: Gabon Childcare Admin Dashboard\n\n## Design Approach\n**System-Based Approach** - Following Material Design principles adapted for data-intensive admin interfaces. This utility-focused application prioritizes clarity, efficiency, and structured information hierarchy for managing childcare services.\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Primary Colors:**\n- Primary Green: 145 63% 49% (buttons, active states, key actions)\n- Primary Green Hover: 145 63% 42%\n- Primary Green Light: 145 63% 95% (backgrounds, subtle accents)\n\n**Secondary Colors:**\n- Orange Accent: 25 95% 53% (notifications, urgent actions, badges)\n- Orange Light: 25 95% 95% (warning backgrounds)\n\n**Neutrals:**\n- Background Base: 145 25% 97% (main background)\n- White: 0 0% 100% (cards, modals, table rows)\n- Gray 50: 145 10% 98%\n- Gray 100: 145 10% 95%\n- Gray 300: 145 5% 85%\n- Gray 500: 145 5% 60%\n- Gray 700: 145 5% 40%\n- Gray 900: 145 5% 15% (primary text)\n\n**Semantic Colors:**\n- Success: 145 63% 49% (reuse primary)\n- Warning: 45 95% 55%\n- Error: 0 70% 50%\n- Info: 210 90% 50%\n\n### B. Typography\n\n**Font Families:**\n- Headings: Poppins (600 weight for major headings, 500 for subheadings)\n- Body: Inter (400 regular, 500 medium, 600 semibold)\n\n**Type Scale:**\n- H1: text-3xl md:text-4xl, font-semibold (Dashboard titles)\n- H2: text-2xl md:text-3xl, font-semibold (Section headers)\n- H3: text-xl md:text-2xl, font-medium (Card titles, modal headers)\n- H4: text-lg md:text-xl, font-medium (Subsection titles)\n- Body Large: text-base md:text-lg (Emphasis text)\n- Body: text-sm md:text-base (Default text)\n- Body Small: text-xs md:text-sm (Labels, captions)\n\n### C. Layout System\n\n**Spacing Primitives:** Use Tailwind units: 2, 3, 4, 6, 8, 12, 16, 20, 24\n- Micro spacing: p-2, gap-2 (tight elements)\n- Component spacing: p-4, gap-4, m-4 (cards, buttons)\n- Section spacing: p-6 md:p-8, gap-6 md:gap-8 (containers)\n- Page spacing: p-6 md:p-12, gap-8 md:gap-12 (major sections)\n\n**Grid System:**\n- Mobile: Single column, full width\n- Tablet (md:): 2-column layouts for cards, grid-cols-2\n- Desktop (lg:): 3-4 column grids, grid-cols-3 lg:grid-cols-4\n- Container max-width: max-w-7xl mx-auto\n\n### D. Component Library\n\n**Navigation:**\n- Top Bar: Fixed header with logo, admin profile, notifications badge (orange), logout\n- Mobile: Hamburger menu, slide-in drawer navigation\n- Desktop: Sidebar navigation with icon + label, collapsible sections\n\n**Data Tables:**\n- Alternating row colors: white / gray-50\n- Hover state: green-light background\n- Column headers: gray-700 text, semibold, sticky positioning\n- Actions column: Icon buttons with tooltips (edit, delete, view)\n- Pagination: Bottom-right, green primary buttons for active page\n- Responsive: Card layout on mobile, full table on tablet+\n\n**Cards:**\n- White background, subtle shadow (shadow-sm), rounded-lg\n- Header: green-light background, p-4, title + action buttons\n- Body: p-4 md:p-6\n- Stats cards: Large number (text-3xl, primary green), label below (gray-500)\n- Service cards: Icon/image top, title, description, action buttons\n\n**Forms & Modals:**\n- Modal overlay: dark overlay (bg-black/50), backdrop-blur-sm\n- Modal container: white, rounded-xl, max-w-2xl, p-6 md:p-8\n- Form groups: space-y-4\n- Labels: text-sm font-medium, gray-700, mb-2\n- Inputs: border-gray-300, rounded-lg, p-3, focus:ring-2 focus:ring-primary focus:border-primary\n- Dropdowns: Same as inputs, chevron-down icon\n- Checkboxes/Radio: Green primary accent\n- Error states: Red border, error text below in red\n\n**Buttons:**\n- Primary: Green background, white text, px-6 py-3, rounded-lg, shadow-sm\n- Secondary: White background, green text, green border, px-6 py-3, rounded-lg\n- Danger: Red background, white text (delete actions)\n- Icon buttons: p-2, rounded-md, hover:bg-gray-100\n- Size variants: sm (px-4 py-2 text-sm), base (px-6 py-3), lg (px-8 py-4 text-lg)\n\n**Status Badges:**\n- Rounded-full, px-3 py-1, text-xs font-medium\n- Active service: green background, dark green text\n- Pending: orange background, dark orange text\n- Cancelled: red background, dark red text\n- Completed: gray background, gray text\n\n**Dashboard Widgets:**\n- Overview cards grid: 2x2 on mobile, 4 columns on desktop\n- Quick actions panel: Rounded cards with icon, title, description\n- Recent activity feed: Timeline with icons, timestamps\n- Charts: Line/bar charts with green/orange color scheme\n\n### E. Animations\n\n**Minimal, Purposeful Motion:**\n- Modal entry: fade + scale (duration-200)\n- Drawer navigation: slide-in-right (duration-300)\n- Table row hover: background color transition (duration-150)\n- Button states: transform scale-95 active state\n- No scroll animations or complex transitions\n\n## Images\n\n**Dashboard Hero/Header:**\n- No large hero image needed for admin interface\n- Optional: Small decorative illustration in empty states (e.g., \"No services found\" - friendly childcare-themed illustration, 240x240px)\n- Service type icons: Use icon library (Heroicons) for service categories (calendar for regular care, clock for occasional, book for homework help)\n\n**Profile/Avatar:**\n- Admin profile photo in top navigation (circular, 40x40px)\n- Default avatar fallback with initials on green background\n\n## Key Principles\n\n1. **Information Density:** Efficiently display service data, child records, and scheduling information without overwhelming users\n2. **Action Clarity:** Every CRUD operation has clear visual affordance with confirmation steps for destructive actions\n3. **Mobile Optimization:** Touch-friendly targets (min 44px), simplified navigation, responsive tables transform to cards\n4. **Status Visibility:** Clear service status indicators, notification badges, real-time updates visual feedback\n5. **Accessibility:** WCAG AA contrast ratios, keyboard navigation, screen reader labels, focus indicators","size_bytes":5838},"client/src/pages/admin-payment-config.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, CreditCard, Smartphone, DollarSign, Eye, EyeOff, Check } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\nimport type { PaymentConfig } from \"@shared/schema\";\n\nconst paymentConfigSchema = z.object({\n  actif: z.boolean(),\n  apiKey: z.string().optional(),\n  apiSecret: z.string().optional(),\n  configJson: z.string().optional(),\n});\n\ntype PaymentConfigForm = z.infer<typeof paymentConfigSchema>;\n\ninterface PaymentProvider {\n  id: string;\n  name: string;\n  icon: typeof CreditCard;\n  description: string;\n  fields: {\n    apiKey: { label: string; placeholder: string };\n    apiSecret: { label: string; placeholder: string };\n    configJson?: { label: string; placeholder: string; description: string };\n  };\n}\n\nconst providers: PaymentProvider[] = [\n  {\n    id: \"airtel_money\",\n    name: \"Airtel Money\",\n    icon: Smartphone,\n    description: \"Configuration pour les paiements via Airtel Money\",\n    fields: {\n      apiKey: { label: \"Clé API\", placeholder: \"Votre clé API Airtel Money\" },\n      apiSecret: { label: \"Secret API\", placeholder: \"Votre secret API Airtel Money\" },\n      configJson: {\n        label: \"Configuration additionnelle (JSON)\",\n        placeholder: '{\"apiUrl\": \"https://api.airtel.africa\", \"merchantId\": \"...\"}',\n        description: \"URL de l'API, ID marchand, etc. (format JSON)\"\n      },\n    },\n  },\n  {\n    id: \"moov_money\",\n    name: \"Moov Money\",\n    icon: DollarSign,\n    description: \"Configuration pour les paiements via Moov Money\",\n    fields: {\n      apiKey: { label: \"Clé API\", placeholder: \"Votre clé API Moov Money\" },\n      apiSecret: { label: \"Secret API\", placeholder: \"Votre secret API Moov Money\" },\n      configJson: {\n        label: \"Configuration additionnelle (JSON)\",\n        placeholder: '{\"apiUrl\": \"https://api.moov-africa.ga\", \"merchantCode\": \"...\"}',\n        description: \"URL de l'API, code marchand, etc. (format JSON)\"\n      },\n    },\n  },\n  {\n    id: \"cinetpay\",\n    name: \"CinetPay\",\n    icon: CreditCard,\n    description: \"Configuration pour les paiements via CinetPay\",\n    fields: {\n      apiKey: { label: \"Clé API\", placeholder: \"Votre clé API CinetPay\" },\n      apiSecret: { label: \"Site ID\", placeholder: \"Votre Site ID CinetPay\" },\n      configJson: {\n        label: \"Configuration additionnelle (JSON)\",\n        placeholder: '{\"callbackUrl\": \"https://votre-site.com/callback\", \"returnUrl\": \"...\"}',\n        description: \"URLs de callback et retour (format JSON)\"\n      },\n    },\n  },\n];\n\nfunction ProviderCard({ provider }: { provider: PaymentProvider }) {\n  const { toast } = useToast();\n  const [showApiKey, setShowApiKey] = useState(false);\n  const [showApiSecret, setShowApiSecret] = useState(false);\n\n  const { data: config, isLoading } = useQuery<PaymentConfig>({\n    queryKey: [`/api/payment-configs/${provider.id}`],\n    retry: false,\n  });\n\n  const form = useForm<PaymentConfigForm>({\n    resolver: zodResolver(paymentConfigSchema),\n    values: {\n      actif: config?.actif || false,\n      apiKey: config?.apiKey || \"\",\n      apiSecret: config?.apiSecret || \"\",\n      configJson: config?.configJson || \"\",\n    },\n  });\n\n  const updateConfigMutation = useMutation({\n    mutationFn: async (data: PaymentConfigForm) => {\n      const response = await apiRequest(\"PUT\", `/api/payment-configs/${provider.id}`, data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/payment-configs/${provider.id}`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/payment-configs'] });\n      toast({\n        title: \"Configuration enregistrée\",\n        description: `La configuration ${provider.name} a été mise à jour avec succès.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erreur\",\n        description: error.message || \"Impossible de mettre à jour la configuration.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PaymentConfigForm) => {\n    updateConfigMutation.mutate(data);\n  };\n\n  const maskSecret = (value: string | null | undefined) => {\n    if (!value || value.length === 0) return \"\";\n    if (value.length <= 4) return \"****\";\n    return \"****\" + value.slice(-4);\n  };\n\n  const Icon = provider.icon;\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"icon-circle bg-primary/20\">\n              <Icon className=\"w-5 h-5 text-primary\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-lg\">{provider.name}</CardTitle>\n              <CardDescription>{provider.description}</CardDescription>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Label htmlFor={`${provider.id}-active`} className=\"text-sm font-medium\">\n              {form.watch(\"actif\") ? (\n                <span className=\"text-green-600\" data-testid={`status-${provider.id}`}>Actif</span>\n              ) : (\n                <span className=\"text-muted-foreground\" data-testid={`status-${provider.id}`}>Inactif</span>\n              )}\n            </Label>\n            <Switch\n              id={`${provider.id}-active`}\n              checked={form.watch(\"actif\")}\n              onCheckedChange={(checked) => form.setValue(\"actif\", checked)}\n              data-testid={`switch-${provider.id}`}\n            />\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"apiKey\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{provider.fields.apiKey.label}</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        {...field}\n                        type={showApiKey ? \"text\" : \"password\"}\n                        placeholder={provider.fields.apiKey.placeholder}\n                        className=\"pr-10\"\n                        data-testid={`input-api-key-${provider.id}`}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                        onClick={() => setShowApiKey(!showApiKey)}\n                        data-testid={`toggle-api-key-${provider.id}`}\n                      >\n                        {showApiKey ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                  </FormControl>\n                  {field.value && !showApiKey && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      Valeur actuelle: {maskSecret(field.value)}\n                    </p>\n                  )}\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"apiSecret\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{provider.fields.apiSecret.label}</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        {...field}\n                        type={showApiSecret ? \"text\" : \"password\"}\n                        placeholder={provider.fields.apiSecret.placeholder}\n                        className=\"pr-10\"\n                        data-testid={`input-api-secret-${provider.id}`}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                        onClick={() => setShowApiSecret(!showApiSecret)}\n                        data-testid={`toggle-api-secret-${provider.id}`}\n                      >\n                        {showApiSecret ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                  </FormControl>\n                  {field.value && !showApiSecret && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      Valeur actuelle: {maskSecret(field.value)}\n                    </p>\n                  )}\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {provider.fields.configJson && (\n              <FormField\n                control={form.control}\n                name=\"configJson\"\n                render={({ field }) => {\n                  const configField = provider.fields.configJson!;\n                  return (\n                    <FormItem>\n                      <FormLabel>{configField.label}</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder={configField.placeholder}\n                          rows={3}\n                          data-testid={`input-config-json-${provider.id}`}\n                        />\n                      </FormControl>\n                      <FormDescription>{configField.description}</FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  );\n                }}\n              />\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"btn-primary w-full\"\n              disabled={updateConfigMutation.isPending}\n              data-testid={`button-save-${provider.id}`}\n            >\n              <Check className=\"w-4 h-4 mr-2\" />\n              {updateConfigMutation.isPending ? \"Enregistrement...\" : \"Enregistrer la configuration\"}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function AdminPaymentConfig() {\n  return (\n    <div className=\"mobile-container min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-50 bg-primary text-white shadow-md\">\n        <div className=\"p-4\">\n          <div className=\"flex items-center gap-3\">\n            <Link href=\"/admin\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"text-white hover:bg-white/20\"\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"w-5 h-5\" />\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-xl font-bold\">Moyens de paiement</h1>\n              <p className=\"text-sm text-white/80\">Configuration des API de paiement</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-4 sm:p-6 pb-32 space-y-6 w-full\">\n        <div className=\"space-y-4\">\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <h3 className=\"text-sm font-semibold text-blue-900 mb-2\">ℹ️ Information</h3>\n            <p className=\"text-sm text-blue-800\">\n              Configurez vos moyens de paiement ici. Activez/désactivez chaque méthode et ajoutez vos clés API.\n              Les clés sont stockées de manière sécurisée et ne sont pas affichées en clair.\n            </p>\n          </div>\n\n          {providers.map((provider) => (\n            <ProviderCard key={provider.id} provider={provider} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12562},"scripts/import-prestations.ts":{"content":"import { readFileSync } from 'fs';\nimport { read, utils } from 'xlsx';\nimport { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { prestations } from '../shared/schema';\n\nconst initDb = () => {\n  const databaseUrl = process.env.DATABASE_URL;\n  if (!databaseUrl) {\n    throw new Error(\"DATABASE_URL environment variable is not defined\");\n  }\n  const sql = neon(databaseUrl);\n  return drizzle(sql);\n};\n\nconst db = initDb();\n\nasync function importPrestations() {\n  try {\n    console.log('📖 Lecture du fichier Excel...');\n    \n    const buffer = readFileSync('attached_assets/Prestations_Dieu_Veille_Sur_Nos_Enfants_1760647484804.xlsx');\n    const workbook = read(buffer);\n    const sheetName = workbook.SheetNames[0];\n    const worksheet = workbook.Sheets[sheetName];\n    \n    const data = utils.sheet_to_json(worksheet);\n    \n    console.log(`✅ ${data.length} lignes trouvées dans le fichier`);\n    console.log('\\n📋 Aperçu des colonnes:');\n    if (data.length > 0) {\n      const firstRow = data[0] as Record<string, any>;\n      console.log(Object.keys(firstRow));\n      console.log('\\n📋 Première ligne:');\n      console.log(firstRow);\n    }\n    \n    console.log('\\n💾 Importation dans la base de données...');\n    \n    let importCount = 0;\n    \n    for (const row of data as any[]) {\n      const nom = row['Prestation'];\n      const prixStr = row['Prix client'];\n      \n      if (!nom || !prixStr) {\n        console.log(`⚠️  Ligne ignorée (données manquantes):`, row);\n        continue;\n      }\n      \n      const prixClean = String(prixStr).replace(/[^\\d]/g, '');\n      const prix = parseFloat(prixClean);\n      \n      if (isNaN(prix)) {\n        console.log(`⚠️  Prix invalide pour \"${nom}\":`, prixStr);\n        continue;\n      }\n      \n      const description = `Service de ${nom.toLowerCase()}`;\n      \n      await db.insert(prestations).values({\n        nom,\n        prix,\n        description,\n      });\n      \n      importCount++;\n      console.log(`✅ Importé: ${nom} - ${prix} FCFA`);\n    }\n    \n    console.log(`\\n🎉 Import terminé! ${importCount} prestations ajoutées.`);\n    process.exit(0);\n    \n  } catch (error) {\n    console.error('❌ Erreur lors de l\\'import:', error);\n    process.exit(1);\n  }\n}\n\nimportPrestations();\n","size_bytes":2313}},"version":2}